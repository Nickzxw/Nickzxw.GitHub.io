<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【笔记】优秀的 PM</title>
    <url>/2022/01/23/2022-1-23-%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p>2022-1-23 学习随笔</p>
<span id="more"></span>
<h3 id="今日收获"><a href="#今日收获" class="headerlink" title="今日收获"></a>今日收获</h3><p>​    <strong>1、互联网产品经理的核心竞争力的是创意和想法</strong>，但传统企业缺乏基本功（写需求、画原型）扎实的产品经理。</p>
<p>​    <strong>2、互联网产品经理通常需要将需求梳理合理、并且能清晰表达出来</strong>。很多传统行业的产品经理属于业务领域，如保险公司的产品经理即保险产品的设计者，与 IT 不相关。</p>
<p>​    <strong>3、需求撰写人员需要由非常强的逻辑性！</strong>产品需求上的逻辑性往往隐含在一些事物的背后。</p>
<p>​    <strong>4</strong>、优秀的产品经理输出的需求文档，不仅<strong>层次清晰、表达效率高</strong>，且细化程度甚至可以与开发代码相媲美，输出的需求涵盖了所有应该考虑到的情况</p>
<p>​    <strong>5、需求中关于产品设计的相关内容描述要全且合理</strong>。用户体验好的前提：功能划分要合理、页面层级适中、页面内容层次结构清晰、页面设计重点突出、页面内容主题明确、页面元素只管、用户路径明确、交互方式友好、文案表达清晰准确等。</p>
<p>​    <strong>6、什么是产品思维？</strong>产品思维讲究系统化，站在未来看现在，面对某个需求，产品思维思考的是这个需求的价值是什么，如何一次性解决未来可能再出现的同质需求，是否还有与之相关的需求或问题等。产品思维的出发点是通过一个什么产品或功能，可以解决业务上的哪些需求和问题。</p>
<p>​    <strong>7、什么是业务思维？</strong>业务思维讲究目标和结果，讲究投入产出和效率，涉及计划、KPI、业务方案、执行、分析与评价等，业务思维的出发点是我的目标是什么，要采用什么样的方法来达成这个目标。</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】产品分析实例— 点淘（淘宝直播）</title>
    <url>/2022/01/26/2022-1-26-%E7%82%B9%E6%B7%98%EF%BC%88%E6%B7%98%E5%AE%9D%E7%9B%B4%E6%92%AD%EF%BC%89%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>2022-01-26 读点淘产品分析的收获</p>
<span id="more"></span>
<h1 id="产品分析的流程"><a href="#产品分析的流程" class="headerlink" title="产品分析的流程"></a>产品分析的流程</h1><h2 id="一、行业分析"><a href="#一、行业分析" class="headerlink" title="一、行业分析"></a>一、行业分析</h2><p><strong>对比分析，深挖行业的底层逻辑以及核心特点。</strong>例如：传统电商的底层逻辑是“人找货”，用户使用场景与线下购物类似；而直播电商的核心特点是快速匹配、及时下单、优惠以及正品保障（我觉得后两者是大头）。</p>
<p>因此对比之下直播电商的转化路径更短，购物过程实时化、线上化是直播电商行业保障高转化率的关键因素。</p>
<p><strong>PEST 模型</strong>（<strong>P</strong>olices <strong>E</strong>conomy <strong>S</strong>ociety <strong>T</strong>echnology），分别从政治（政策）、经济、社会、科技等方面所探讨该行业的快速发展的底层逻辑。</p>
<h3 id="1、Polices"><a href="#1、Polices" class="headerlink" title="1、Polices"></a>1、Polices</h3><p>得益于国内“互联网+”模式的多年发展，直播电商等线上经济成为常态化疫情背景下有效稳定市场经济发展的工具之一。</p>
<p><strong>PS：密切关注国家政策和商务部的政策。</strong></p>
<h3 id="2、Economy"><a href="#2、Economy" class="headerlink" title="2、Economy"></a>2、Economy</h3><p><strong>GMV</strong> ：商品交易总额（一定时间段内），多用于电商行业，一般包括拍下未支付订单金额。</p>
<p>通过各种图表说明变化趋势，研究报告来源如：<a href="https://www.askci.com/">中商情报网</a> 、<a href="https://bg.qianzhan.com/">前瞻研究院</a>等。</p>
<h3 id="3、Society"><a href="#3、Society" class="headerlink" title="3、Society"></a>3、Society</h3><p>从产品的用户数量、比例的变化入手，分析产品的受众规模以及对用户习惯性为。</p>
<h3 id="4、Technology"><a href="#4、Technology" class="headerlink" title="4、Technology"></a>4、Technology</h3><p>IT 新型技术（5G、云计算、区块链、人工智能、大数据等）的的落地给产品带来的变化和改善。</p>
<h2 id="二、竞品分析"><a href="#二、竞品分析" class="headerlink" title="二、竞品分析"></a>二、竞品分析</h2><p>成长路径、业务模式、商业画布</p>
<p><strong>点淘 APP 的商业画布</strong></p>
<p><img src="business.png" alt=""></p>
<p>通过这个商业画布分析的例子，我们知道点淘 App 通过引入商家（品牌方）、主播（MCN）和消费者来形成线上购物闭环。</p>
<p><strong>抖音直播电商的商业画布</strong></p>
<p><img src="douyin.png" alt=""></p>
<p>对比与竞品之间的异同，分析产品的<strong>核心竞争力</strong>所在，如：点淘 APP 依赖于淘宝及天猫的品牌方加持以及头部网红主播的流量支撑，能够实现高转化率以及高GMV，同时形成以商家、主播、消费者为核心的商业闭环，是促成点淘APP收获巨大业务量的核心原因。</p>
<h2 id="三、用户价值分析"><a href="#三、用户价值分析" class="headerlink" title="三、用户价值分析"></a>三、用户价值分析</h2><p>分析产品的受众人群，例如：直播电商行业的参与方一般有四类：消费者、MCN 机构、主播、商家（品牌方）和平台。</p>
<p><img src="user_value.png" alt=""></p>
<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>大数据时代的来临，导致用户进入信息大爆炸的环境。在这样的环境下，用户虽然能够获取到的信息更多，但信息壁垒反而更高，<strong>用户在海量信息中寻找有用价值信息的成本更高</strong>。</p>
<p><strong>消费者在海量商品中选择到符合消费者预期的商品的难度不断加大</strong>，包括商品价格、商品外观、商品质量等各种因素导致用户购买决策难度加大。</p>
<p>传统电商环境下，消费者购物过程中的信息获取成本高、对商品信任度不够、决策行为复杂、决策流程过长、决策成本高。</p>
<h3 id="MCN-机构和主播"><a href="#MCN-机构和主播" class="headerlink" title="MCN 机构和主播"></a>MCN 机构和主播</h3><p>对于主播来说，<strong>希望能在一个稳定的直播平台上开展直播</strong>，即主播需要一个能够提供大量的直播观看用户、常年稳定运行的平台。</p>
<p><strong>需要一个简单易用、场景多样化的直播场所</strong>。直播场所是主播连接消费者的重要场景，直播场所的可用性、易用性是直接决定用户购买转化率的重要因素。</p>
<p>一个具备优质用户体验的直播平台能够让主播更好地展示自己和商品，并让主播能够更好地讲解商品，从而能够提高用户购买的转化率，并增强用户粘性。</p>
<p><strong>需要为主播和MCN机构提供流量曝光的渠道</strong>。</p>
<p><strong>主播行业需要依赖大量的运营工具，包括内容制作工具、短视频制作功能等等</strong>。</p>
<h3 id="商家（品牌方）"><a href="#商家（品牌方）" class="headerlink" title="商家（品牌方）"></a>商家（品牌方）</h3><p>对于所有品牌方来说，<strong>用户沉淀非常困难</strong>，平台能够吸引新用户，但老用户也不断流失，缺乏针对性的营销手段，呈现出粉丝变现困难的情况。</p>
<p>除了需要考虑拉新、维系老用户、开拓渠道商以外，传统电商平台的活跃度较低，品牌方缺乏高效的营销互动手段，消费者对于目前的电商营销手段展现出疲软现象。</p>
<h3 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h3><p>消费者购物存在的主要问题包括：</p>
<ul>
<li>消费者在海量商品中选择到符合消费者预期的商品的难度大</li>
<li>消费者购物过程中的信息获取成本高、对商品信任度不够、决策行为复杂、决策流程过长、决策成本高</li>
</ul>
<p>主播和MCN机构来说，存在的主要问题包括：</p>
<ul>
<li>需要一个稳定的直播平台</li>
<li>需要一个简单易用、场景多样化的直播场所</li>
<li>需要流量曝光渠道</li>
<li>需要大量的运营工具</li>
</ul>
<p>品牌方来说，存在的主要问题包括：</p>
<ul>
<li>品牌方的获客成本高</li>
<li>品牌用户沉淀困难</li>
<li>经渠道商分销后的产品利润较低</li>
<li>传统电商平台的活跃度较低，缺乏高效的营销互动手段</li>
</ul>
<p>平台方如何解决上述问题与需求？</p>
<ol>
<li><strong>直播平台搭建</strong></li>
<li><strong>引入大流量主播和MCN机构，构建淘系直播规则</strong></li>
<li><strong>提供多元化内容分享方式</strong></li>
<li><strong>构建流量分发机制</strong></li>
</ol>
<h2 id="四、商业价值分析"><a href="#四、商业价值分析" class="headerlink" title="四、商业价值分析"></a>四、商业价值分析</h2><p>点淘的核心业务是通过直播带货提高消费者购物转化率，判断点淘的营收指标可以在传统电商常用的GMV指标上进行改进，直播电商的GMV=场均UV <em> UV转化率 </em> 客单价 * 直播场次，如何从这四个方面进行优化是提升 GMV 的关键。</p>
<p><strong>PS: 场均UV可以看做是直播间观众人数，UV转化率也就是直播间观众下单率</strong></p>
<p><img src="business_value.png" alt=""></p>
<h2 id="五、产品结构分析"><a href="#五、产品结构分析" class="headerlink" title="五、产品结构分析"></a>五、产品结构分析</h2><p><img src="structure.png" alt=""></p>
<p><img src="require.png" alt=""></p>
<p>点淘APP的目前功能设计基本可以满足消费者购物前和购物后两个场景下的需求，对于不同消费者的高频需求在产品结构上能够做到合理分布，突出重点，是一款出色的直播电商产品。</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】认知负荷</title>
    <url>/2022/02/12/2022-2-12-%E8%AE%A4%E7%9F%A5%E8%B4%9F%E8%8D%B7/</url>
    <content><![CDATA[<p>2022-2-12-学习笔记</p>
<blockquote>
<p>好的设计不应该是引人注目的，而是自然而然帮助用户完成任务，甚至用户都没发现。</p>
</blockquote>
<span id="more"></span>
<h1 id="什么是认知负荷"><a href="#什么是认知负荷" class="headerlink" title="什么是认知负荷"></a>什么是认知负荷</h1><p><strong>认知负荷</strong> 是指用户看到界面后需理解、思考、回忆、计算过程中的脑力消耗。 Don’t make the ink ! 不要让用户因为思考而增加额外的认知负荷。</p>
<p>就像下面这样：</p>
<p><img src="less.png" alt=""></p>
<p>上图左边设计中的按钮其实很多都是极其低频的使用，给用户施加了极大的【负荷】，人脑特性不善于处理高符合，所以需要降低用户的【认知负荷】、【合理调节认知符合】，让用户顺利完成任务。</p>
<p><strong>合理调节认知负荷可采用：</strong></p>
<ol>
<li>减少选择（less is more）</li>
<li>将复杂进行拆解，循序渐进。</li>
<li>保持设计的一致性。</li>
<li>视觉和触觉上层次分明，帮助用户获取信息。</li>
</ol>
<h1 id="合理调节认知负荷"><a href="#合理调节认知负荷" class="headerlink" title="合理调节认知负荷"></a>合理调节认知负荷</h1><h2 id="减少选择"><a href="#减少选择" class="headerlink" title="减少选择"></a>减少选择</h2><p>选择越多反而不知道该选什么。当用户有太多选择时，他们往往会感到沮丧。就算一个产品拥有世界上所有的功能，如果因为界面内容过多选择照样会让这个产品显得无比不友好。</p>
<p>所以在设计时，还是要先贯彻交互设计的第一策略：合理删除，先做减法，尽可能地消除一切干扰。</p>
<h2 id="拆解复杂，循序渐进"><a href="#拆解复杂，循序渐进" class="headerlink" title="拆解复杂，循序渐进"></a>拆解复杂，循序渐进</h2><p>加步骤会导致每一步的转化流失，所以大多不建议有多步骤的任务路径。</p>
<p>但是实际业务中，不可避免需要用户填写、选择的内容就是很多，且必须要有，这时可以将其全部整理出来，根据步骤之间的亲密性进行分组，将大任务拆分成多个子任务，每次只展示一小个模块，这样用户就可以轻松地一次处理一小块信息，提高处理效率（这样不会因为步骤变多而令用户觉得繁琐吗？）。</p>
<p>用户可以轻松完成第一个步骤，进入第二个步骤的概率就会高很多，因为用户已经付出了沉默成本（单页面展示变少，页面增多，内容总量不变）。</p>
<h2 id="保持设计一致性"><a href="#保持设计一致性" class="headerlink" title="保持设计一致性"></a>保持设计一致性</h2><p>设计的统一性是保证体验的基础，因为可以尽可能降低用户的认知负担。</p>
<p>所以设计师在设计时应该使用用户熟悉产品的视觉、交互的设计，这也就是为什么这么大厂都有自己的组件库，为的就是保证产品在多次的迭代过程中都能保证设计的一致性，避免产品各个模块在团队协作过程中出现另类的页面，导致用户突然很不习惯。（原来如此）</p>
<h2 id="视觉层次分明"><a href="#视觉层次分明" class="headerlink" title="视觉层次分明"></a>视觉层次分明</h2><p>清晰的视觉层级能够帮助用户更好地获取信息重点，从而帮助用户减少认知负荷，视觉上诸如文字大小，按钮大小等分布都需要根据重要程度进行层次的划分。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过降低用户的认知负荷实际上为了提高产品的易用性，降低用户学习与操作成本，从而让用户能够顺畅使用产品完成自己的任务。认知负荷越小，可用性越高！</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】好的产品原型有哪些特点</title>
    <url>/2022/02/02/2022-2-2-%E5%A5%BD%E7%9A%84%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E7%82%B9/</url>
    <content><![CDATA[<p>2022-2-2-PM 学习心得</p>
<p><a href="http://www.woshipm.com/rp/5306273.html">原文戳此链接</a></p>
<span id="more"></span>
<h1 id="产品原型的设计原则"><a href="#产品原型的设计原则" class="headerlink" title="产品原型的设计原则"></a>产品原型的设计原则</h1><p>我所收获到的知识：知道好的原型应该写什么，应该怎么写，即对原型方案设计具有清晰的认知。避免最后上线内容与 PM 设想结果偏差较大的情况出现。</p>
<h2 id="一、先对产品原型本身进行深入认知"><a href="#一、先对产品原型本身进行深入认知" class="headerlink" title="一、先对产品原型本身进行深入认知"></a>一、先对产品原型本身进行深入认知</h2><p>一个完整的需求 = 目标用户 + 使用场景 + 用户在该场景下想要完成的目标。产品原型本身包含下面两个场景：</p>
<h3 id="1、弱使用场景"><a href="#1、弱使用场景" class="headerlink" title="1、弱使用场景"></a>1、弱使用场景</h3><p>a、产品经理接到运营的需求后给出对应的解决方案（为什么是运营？），并用原型的形式向运营确定这种解决方案是否能达到运营的设想；</p>
<p>b、完成整体的产品方案后，向上级领导进行汇报，确认领导们是否认可整体的方案设计思路或细节。</p>
<h3 id="2、强使用场景"><a href="#2、强使用场景" class="headerlink" title="2、强使用场景"></a>2、强使用场景</h3><p>a、产品经理在需求宣讲会上以产品原型为依据，对开发、测试、设计人员进行需求宣讲，以便所有项目内成员对需求有大体上的了解；</p>
<p>b、开发、测试、设计人员在需求宣讲后依据产品原型对工作量进行拆分并安排工作任务，以便所有项目成员能准确的评估项目完成时间进行科学的工作划分；</p>
<p>c、开发人员在实现过程中，以原型为依据进行技术开发，以便最终上线交付的内容是符合项目整体目标的高质量产品。</p>
<h3 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h3><p>因此，产品原型的主要使用者是配合 PM 一起完成上线目标的研发同学们，所以一旦 PM 在产品原型上出现表达失误，就会影响整个团队的进度。</p>
<h2 id="二、撰写产品原型的原则"><a href="#二、撰写产品原型的原则" class="headerlink" title="二、撰写产品原型的原则"></a>二、撰写产品原型的原则</h2><p>主要有以下四大原则：</p>
<p><img src="FourRules.png" alt=""></p>
<h3 id="1、边界清晰原则"><a href="#1、边界清晰原则" class="headerlink" title="1、边界清晰原则"></a>1、边界清晰原则</h3><p>边界清晰是指让阅读这份产品原型的人知道哪些是本次研发项目的内容，需要清晰定义边界才能分工明确，拆分任务。</p>
<ul>
<li>若产品已上线，此后产品的需求基本是在上线基础上迭代优化，需要重点标注<strong>新增点、修改点和不修改的部分</strong></li>
<li>产品包含多变用户的时候需要准确说明当前产品的用户是谁，不同的用户操作权限是否有区别</li>
</ul>
<h3 id="2、内容完整性原则"><a href="#2、内容完整性原则" class="headerlink" title="2、内容完整性原则"></a>2、内容完整性原则</h3><p>一般日常迭代的小型需求需要包含的内容有：</p>
<ul>
<li>背景说明—让参与者知道为什么要做这个需求，该需求要实现什么样的目标？</li>
<li>需求清单—需求有哪些？</li>
<li>流程图—需求通过怎样的方式闭环？</li>
<li>功能界面—具体的需求是怎样的？</li>
<li>需求标注—怎样实现需求的效果？</li>
</ul>
<p>项目型的原型还需要包括该项目的顶层设计和版本规划，以此来让所有参与者知悉项目的发展全貌和达成路径，让团队的整体思想在同一高度。</p>
<h4 id="1）背景说明"><a href="#1）背景说明" class="headerlink" title="1）背景说明"></a>1）背景说明</h4><p><strong>5W1H 原则</strong></p>
<ul>
<li>Who：是什么用户群体？产品或功能为谁设计？</li>
<li>What：用户可以用这个产品或功能可以做什么？产品或功能能够为用户解决什么问题？</li>
<li>Where：用户在什么样的场景下使用这个产品或功能？</li>
<li>When：用户什么时候会使用这个产品或功能？</li>
<li>Why：用户为什么用这个歌产品，而不用别的？为什么需要这个功能？和其它产品相比它的优势在哪？。</li>
<li>How：用户怎样使用这个产品或功能？</li>
</ul>
<h4 id="2）需求清单"><a href="#2）需求清单" class="headerlink" title="2）需求清单"></a>2）需求清单</h4><p>区分功能性需求和非功能性需求，包含但不仅限于以下内容：需求编号、所属模块（可持续划分）、需求概述、开发方式、是否需要设计、优先级、产品负责人等。</p>
<p><img src="Request.png" alt=""></p>
<h4 id="3）流程图"><a href="#3）流程图" class="headerlink" title="3）流程图"></a>3）流程图</h4><p>根据实际需求绘制业务、功能、页面流程图：<strong>业务流程图</strong>用于描述完整的业务流程（包括角色、环节），即要完成一项任务所涉及到的操作流程；<strong>功能流程图</strong>用于明确功能的设计逻辑，以业务流程图为主线，去细化每个环节的功能逻辑（如判断必填项/判断登录状态/判断操作权限等等）；<strong>页面流程图</strong>用于明确用户在操作产品时，涉及的页面以及页面之间的流向关系。</p>
<p>下面截取了文中的举例：</p>
<p><img src="Business.png" alt=""></p>
<p><img src="Features.png" alt=""></p>
<p><img src="Page.png" alt=""></p>
<h4 id="4）功能界面"><a href="#4）功能界面" class="headerlink" title="4）功能界面"></a>4）功能界面</h4><p>功能界面是原型方案的重头戏，需要明确：</p>
<ol>
<li>按照流程绘制内容。</li>
<li>确保方案中每个模块的层次是清晰的。</li>
</ol>
<h5 id="a、按照流程绘制内容"><a href="#a、按照流程绘制内容" class="headerlink" title="a、按照流程绘制内容"></a>a、按照流程绘制内容</h5><p>推荐按照业务流程图的顺序来进行内容绘制，切忌打乱流程顺序想到哪里就画到哪里。这样做的好处是产品经理不容易漏掉产品需求中的环节，还能让阅读原型人通过原型里内容顺序快速了解用户的行为路径。</p>
<h5 id="b、确保层次清晰"><a href="#b、确保层次清晰" class="headerlink" title="b、确保层次清晰"></a>b、确保层次清晰</h5><p>一份需求文档中可能包含多个产品板块，在进行多板块的产品原型绘制时需要注意每个板块之间的逻辑关系和层次递进。</p>
<h4 id="5）需求标注"><a href="#5）需求标注" class="headerlink" title="5）需求标注"></a>5）需求标注</h4><p>需求标注也考核一个产品经理基本功的重要指标。一个完整的需求标注至少需要包含4部分的内容：<strong>功能默认形态、功能操作反馈逻辑、功能容错性、功能拓展性</strong>四方面的说明。</p>
<h5 id="a、功能默认形态"><a href="#a、功能默认形态" class="headerlink" title="a、功能默认形态"></a>a、功能默认形态</h5><p>指此功能在默认情况下的状态说明。例如：你在淘宝购物时，下单后你的收货地址是你所设置的默认收货地址。</p>
<h5 id="b、功能操作反馈逻辑"><a href="#b、功能操作反馈逻辑" class="headerlink" title="b、功能操作反馈逻辑"></a>b、功能操作反馈逻辑</h5><p>标注功能是否可以进行交互操作，操作的方式是怎样的，操作后会有什么样的变化等。还是上面的例子：当你i点击你的收货地址时会进入下级页面，可以将你的地址切换为其他已经定义的地址。</p>
<h5 id="c、功能容错性"><a href="#c、功能容错性" class="headerlink" title="c、功能容错性"></a>c、功能容错性</h5><p>可以理解为当默认形态失效或出错时，需要进行怎样的变化来应对。如果你第一次在淘宝购物没有默认地址时，显示“请添加地址”。</p>
<h5 id="d、功能拓展性"><a href="#d、功能拓展性" class="headerlink" title="d、功能拓展性"></a>d、功能拓展性</h5><p>即当某些功能在极限情况下，是否有所变化来包容功能的扩展。例如标题过长时，折叠或者以“…”显示。</p>
<h3 id="3、逻辑严谨性原则"><a href="#3、逻辑严谨性原则" class="headerlink" title="3、逻辑严谨性原则"></a>3、逻辑严谨性原则</h3><p><strong>通畅性：</strong>进行原型设计时需确认流程能否顺利跑通、是否有断崖或死循环？</p>
<p><strong>容错性：</strong>进行原型设计时需确认方案包含正向流程、逆向流程、异常状态所需的所有功能。</p>
<h3 id="4、设计合理性原则"><a href="#4、设计合理性原则" class="headerlink" title="4、设计合理性原则"></a>4、设计合理性原则</h3><p>好的原型方案还要绘制的”好看“。</p>
<p>设计小技巧：</p>
<h4 id="1）对齐原则"><a href="#1）对齐原则" class="headerlink" title="1）对齐原则"></a>1）对齐原则</h4><p>原型里的每个元素不论是图形还是文字都有其对应的对齐规则。</p>
<p><img src="duiqi.png" alt=""></p>
<h4 id="2）对比原则"><a href="#2）对比原则" class="headerlink" title="2）对比原则"></a>2）对比原则</h4><p>加大不同元素或者板块的对比和视觉差异，当需要对某些内容进行强调时通过对比实现分层。</p>
<p><img src="duiqi.png" alt=""></p>
<h4 id="3）亲密原则"><a href="#3）亲密原则" class="headerlink" title="3）亲密原则"></a>3）亲密原则</h4><p>相邻的元素之间必须要有相关性，因为如果两个元素靠的很近，直觉上会令用户认为他们之间有关系。</p>
<h4 id="4）一致性原则"><a href="#4）一致性原则" class="headerlink" title="4）一致性原则"></a>4）一致性原则</h4><p>页面的元素之间在设计上必须保证一致性和连贯性；不同页面如果使用了相同元件和相同的交互，方式必须保证一致性。</p>
<p><img src="yizhi.png" alt=""></p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>铭记 <strong>边界清晰、内容完整、逻辑严谨、设计合理</strong> 四大原则。</p>
<p>大家新年快乐！！</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】产品经理的思维方式</title>
    <url>/2022/02/05/2022-2-5-%E4%BA%A7%E5%93%81%E5%93%81%E7%BB%8F%E7%90%86%E7%9A%84%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>2022-2-5-学习笔记</p>
<blockquote>
<p>PM 需要形成自己的、符合产品岗位的思维方式、才能更好地做出适应市场、满足用户需求的产品。</p>
</blockquote>
<span id="more"></span>
<h1 id="一、PM-的思维方式"><a href="#一、PM-的思维方式" class="headerlink" title="一、PM 的思维方式"></a>一、PM 的思维方式</h1><h2 id="1、从直接回答问题，到先搞清楚问题"><a href="#1、从直接回答问题，到先搞清楚问题" class="headerlink" title="1、从直接回答问题，到先搞清楚问题"></a>1、从直接回答问题，到先搞清楚问题</h2><p>看到问题不要先回答，面对一个问题时首先要收集信息，采集需求然后整理信息，找出问题的核心是什么？将问题拆解，多问自己对于问题的 what、why、who、where、fluency、emergency 都足够了解了没。</p>
<p><img src="question.png" alt=""></p>
<p><strong>只做一次的事情找可行解，反复做的事情则要寻找最优解。</strong></p>
<p>学会断舍离，找到用户的核心需求，围绕核心需求去做产品，去除冗余功能。</p>
<h2 id="2、以自我为中心，到以用户为中心"><a href="#2、以自我为中心，到以用户为中心" class="headerlink" title="2、以自我为中心，到以用户为中心"></a>2、以自我为中心，到以用户为中心</h2><p>不同用户的需求是不一样，所以解决方式也不一样。这会影响到产品的架构设计，比如滴滴，用户的需求是快速打到车，所以主页面是地图，用户填写目的地，选择不同的车型，就可以了；而司机的需求是快速抢单，所以主页面是用户订单列表。</p>
<p>我们要具备 “同理心 ”，学会换位思考，站在用户的角度去思考问题，而不是以个人喜好主观的去判断一个产品的好坏。比如在竞品分析中，需要客观地去评价竞品的功能，使用数据和信息来作证判断。</p>
<h2 id="3、从只看到现象，到发现问题的本质"><a href="#3、从只看到现象，到发现问题的本质" class="headerlink" title="3、从只看到现象，到发现问题的本质"></a>3、从只看到现象，到发现问题的本质</h2><p><strong>不再被表面蒙骗，要学会追问逻辑的尽头。任何事物的本质都相对简单。</strong></p>
<p>最经典的一个商业案例来自麦当劳的一个内部项目，目标是增加店里奶昔的销量。</p>
<p>大公司做这类项目的一般流程都是：先定义奶昔这个产品在市场的定位是什么，然后选出最可能购买奶昔的人群，之后组织一些典型客户来做各种调研和采访。</p>
<p>这么一通折腾下来，麦当劳的奶昔在口味和性价比上越来越有进步，但是销量却没什么增长。后来，麦当劳就请了哈佛商学院的克里斯滕森教授来继续研究这个项目，看看有没有一些其他的解决方案。</p>
<p>一开始，克里斯滕森的团队关注的主要也是产品。他们对产品做了很多研究，但也没得出什么新的结论。这时候，团队里面有一个研究人员决定忽略奶昔本身，直接去研究顾客。于是他每天坐在麦当劳里长达18个小时，观察都有哪些人在什么时候买奶昔。</p>
<p>结果，他发现了一个有意思的事情： 他所在的那家麦当劳40%的奶昔都是早上卖出去的，而且买这些奶昔的顾客一般都是一个人，也不会搭配奶昔买其他别的东西，并且基本都是拿回车上喝。</p>
<p>克里斯滕森的团队觉得很奇怪，因为早上喝奶昔好像并不太符合大家对这种食物的印象。于是他们就开始采访这些买奶昔的顾客，问他们为什么要买奶昔。最终他们发现，这些顾客买奶昔的理由是这样的：</p>
<p>首先，他们都要开一段很长又无聊的车，一般是去公司上班或者去办事，所以想买个好吃的在路上打发时间；</p>
<p>其次，他们早上的时候虽然不饿，但一般等到10点至11点左右就会开始饿了，所以先提前垫垫肚子；</p>
<p>另外还有一个特点，就是这些人一般在吃东西的时候都有一些限制。比如一般他们着急去上班，没法等太久；穿着工作服，不能弄脏；再有就是，大部分人因为要开车，最多只能空出一只手来。</p>
<p>观察到这些之后，克里斯滕森就提出了一个很经典的观点，他说， <strong>用户购买的并不是某种产品或者服务，其实他们做的是，“雇佣”你的产品或者服务，来完成他们面临的某种任务。</strong></p>
<p><strong>真正的理解客户不是机械地去做调研、问一些调查问题，简单得出一些结论就完了。重要的是真正带着同理心去观察你的客户，了解隐藏在他们行为后面真正的需求和渴望是什么，透过表象看到本质。这样才能真正做出好的产品。</strong></p>
<h1 id="二、PM-需要有哪些性格特性"><a href="#二、PM-需要有哪些性格特性" class="headerlink" title="二、PM 需要有哪些性格特性"></a>二、PM 需要有哪些性格特性</h1><h2 id="1、保持好奇心"><a href="#1、保持好奇心" class="headerlink" title="1、保持好奇心"></a>1、保持好奇心</h2><p>当今互联网的信息具有很强的时效性，如果不提前抓住机会进入到需求蓝海就会错失先机，那么再次进入这个领域就会很困难。</p>
<p>养成每天都去思考手机的里产品的习惯，尝试着多问问自己，这个产品/功能满足得了哪几类的哪些需求？为什么这个功能这么做，而不那样做？这个产品/功能是否还可以改善？</p>
<h2 id="2、创新和持续学习"><a href="#2、创新和持续学习" class="headerlink" title="2、创新和持续学习"></a>2、创新和持续学习</h2><p>创新精神很重要，做同类产品时，我们一定要做出差异性来，否则，原先的用户是很难转移过来。因为人会习惯性的使用之前的产品。</p>
<h2 id="3、良好的逻辑思维"><a href="#3、良好的逻辑思维" class="headerlink" title="3、良好的逻辑思维"></a>3、良好的逻辑思维</h2><p>一方面需要人们对关键细节的追求，另一方面也需要有大局观，知道战略比战术更重要，知道合理妥协的必要性。</p>
<p>这是一种自上而下的产品设计，切忌再没有弄清楚产品需求和逻辑时，就直接开始画图。</p>
<h2 id="4、善于沟通"><a href="#4、善于沟通" class="headerlink" title="4、善于沟通"></a>4、善于沟通</h2><p>因为产品是有多个角色一起去协助完成的，所以良好的团队沟通是必不可少的。</p>
<h2 id="5、抗压"><a href="#5、抗压" class="headerlink" title="5、抗压"></a>5、抗压</h2><p>协调多方的角色，不要变成背锅侠……</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>A Global Analysis of the Impact of COVID-19</title>
    <url>/2021/10/31/A-global-analysis-of-the-impact-of-COVID-19/</url>
    <content><![CDATA[<p><strong>A Global Analysis of the Impact of COVID-19 Stay-At-Home Restrictions on Crime</strong> </p>
<p><strong><em>From Natural Human Behaviour</em></strong></p>
<p><em>Amy E. Nivette  1,2 ✉, Renee Zahnow  3, Raul Aguilar  4, Andri Ahven5, Shai Amram6, Barak Ariel  6,7,</em><br><em>María José Arosemena Burbano7, Roberta Astolfi8, Dirk Baier9, Hyung-Min Bark  10, Joris E. H. Beijers2,</em><br><em>Marcelo Bergman11, Gregory Breetzke  12, I. Alberto Concha-Eastman  13, Sophie Curtis-Ham  14,</em><br><em>Ryan Davenport15,16, Carlos Díaz17, Diego Fleitas  11, Manne Gerell  18, Kwang-Ho Jang19,</em><br><em>Juha Kääriäinen20, T apio Lappi-Seppälä  20, Woon-Sik Lim19, Rosa Loureiro Revilla7,</em><br><em>Lorraine Mazerolle  3, Gorazd Meško21, Noemí Pereda  22, Maria F. T. Peres  8,<br>Rubén Poblete-Cazenave  23, Simon Rose7,16, Robert Svensson  18, Nico T rajtenberg24,</em><br><em>T anja van der Lippe1, Joran Veldkamp1, Carlos J. Vilalta Perdomo  25 and Manuel P. Eisner  7, 26</em></p>
<p><strong>Objective</strong> The stay-at-home restrictions to control the spread COVID-19 led to unparalleled(前所未有的) sudden change in daily life but it is unclear how they affected <u><em>urban crime globally</em></u>.</p>
<p><strong>Methods</strong> We collected data on daily counts of crime in 27 cities across 23 counties in the Americas, Europe, the Middle East and Asia. We conducted <u>interrupted time series analyses</u>(间断时间序列分析) to assess the impact of stay-at-home restrictions on different types of crime <strong>(Assault, Burglary, Robbery, Theft, Vehicle theft, Homicide)</strong>  in each city.</p>
<p><strong>Results</strong> Our findings show that the stay-at-home policies were associated with a considerable drop in urban crime, but with substantial variation across cities and types of crime. Meta-regression results shower that more stringent restrictions over movement in public space were predictive of larger declines in crime.</p>
<span id="more"></span>
<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>On 11 March 2020, the World Health Organization declared COVID-19 to be a public health emergency of global concern. National and local authorities moved to impose a range of measures to slow the spread of virus (“flatten the curve”). Collectively referred to as <em>‘lockdown’</em> measures in most countries, regulations have included some combination of stay-at-home orders, travel bans, closures of schools and places of entertainment and restrictions on public and private gatherings. Spatial mobility data suggest that, at the peak of the so-called <em>lockdown</em>—in late March and April 2020—daily movements related to retail and rec-<br>reation had declined by over 80% in many countries in Europe and  Latin America.</p>
<h1 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h1><p>In  this  study,  we  examine(调查)  the  extent(程度)  to  which  stay-at-home restrictions in 27 cities in the Americas, Europe, the Middle East and Asia were associated with a change in levels of six types of police-recorded  crime.  The  cities  represent  a  large  variation  of measures relating to stay-at-home restrictions. They range from mostly voluntary recommendations to avoid public space to a complete halt (停止)of all but the most essential activities, based on emergency legislation and enforced by substantial penalties(实质性的处罚) for breaching the rules(违反规则).</p>
<h1 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h1><p>Various theories of crime examine how sudden and persisting restraints on population movements caused by, for example, natural disasters, blackouts(停电) or epidemics affect crime levels. </p>
<p>​    <strong><em>Theories of individual and structural strain</em></strong>(个体应变与结构应变理论) suggest that such restraints(限制) increase levels of stress and negative emotions such as anxiety, frustration and anger, thereby leading to an increase in criminal motivations. In this vein(在这方面), social isolation and reduced freedom of movement associated with COVID-19 containment policies are anticipated to heighten levels of strain and reduce access to support with implications for <em>child maltreatment, domestic violence and substance use</em>(虐待儿童、家庭暴力和滥用药物). </p>
<p>​    <strong><em>Opportunity theory and routine activity theory</em></strong>, in contrast, suggest that stay-at-home policies interrupted the daily movements in time and space of suitable targets, capable guardians and motivated offenders on which most crime, especially crime in public space, feeds. They hence predict that crime levels fall as the mobility of entire urban populations is restricted. They hence predict that crime levels fall as the mobility of entire urban populations is restricted.</p>
<p>​    opportunity structures are specific to different types of crimes, and a change in opportunities for theft may not correlate with a change in opportunities for assault. <strong>For example,</strong> opportunities for certain property crimes, such as theft and robbery, depend on the daily flow of people into commercial areas and nearby transportation nodes that offer a high volume of suitable targets and access/exit paths for motivated offenders, and may hence have declined particularly strongly as a result of the <em>lockdown</em> measures. <strong>Similarly</strong>, as most people stayed at home throughout the day, fewer houses were left unsupervised(无监管) and residential burglary may have become much more difficult, while commercial buildings(商业建筑) likely became less supervised and hence an easier target.</p>
<h1 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h1><h2 id="Crime-data"><a href="#Crime-data" class="headerlink" title="Crime data"></a><em>Crime data</em></h2><p>​    Daily crime data were collected from 27 cities representing 23 countries around the world. We sought daily crime data on assault, burglary, robbery, theft, vehicle theft and homicide for the current analyses.</p>
<p>​    The ‘date’ of the time series refers to the date the offence presumably occurred, as recorded by the police. In cases where this information was not available (that is, Amsterdam and São Paulo), the date of reporting was used.</p>
<h2 id="The-‘treatment’-variable"><a href="#The-‘treatment’-variable" class="headerlink" title="The ‘treatment’ variable"></a><em>The ‘treatment’ variable</em></h2><p>​    The treatment effect of a city’s stay-at-home restrictions on crime incidents is measured using a dummy<br>variable(虚拟变量), whereby 1 represents the period in which restrictions were in place and 0 represents the period prior to (or following) the implementation of restrictions.</p>
<h2 id="Covariates-in-ITS-models"><a href="#Covariates-in-ITS-models" class="headerlink" title="Covariates in ITS models"></a><em>Covariates in ITS models</em></h2><p>​    <strong>Climate data</strong> for cities were drawn from the National Centers for Environmental Information。</p>
<p>​    In addition, we include <strong>yearly population</strong> as an offset in all models. Population data for each city were drawn from the United Nations’ World Population Prospects(联合国-世界预期人口).</p>
<h2 id="Interrupted-time-series-analyses"><a href="#Interrupted-time-series-analyses" class="headerlink" title="Interrupted time series analyses"></a><em>Interrupted time series analyses</em></h2><p>​    The ITS analyses were estimated using Poisson generalized linear models with a logit-link function.</p>
<h2 id="Meta-analyses"><a href="#Meta-analyses" class="headerlink" title="Meta-analyses"></a><em>Meta-analyses</em></h2><p>​    Due to the heterogeneous nature of lockdowns and crime definitions across countries, we used random-effects models to estimate summary effects.</p>
<h1 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h1><p>​    In this study, we examined trends in police-recorded crime in the period after the introduction of stay-at-home policies in 27 cities worldwide. Our findings show that the stay-at-home policies were associated with a substantial drop in urban crime. On average, the overall reduction in crime levels across all included cities was −37%. They suggest that the sudden decline in urban mobility triggered by the stay-at-home policies reduced opportunities and increased guardianship relating to many high-volume crimes. In other words, as  expected  by  economic  and  criminological  opportunity  theories, we found strong evidence that crime levels respond quickly to changing opportunity structures and constraints, and that change in crime levels does not necessarily require large-scale changes in offender motivation. At least in the short run, the change in routine activities rather than the increase in psychological and social strains was the dominating mechanism that affected change in overall crime levels. We did not find evidence for or against displacement effects in the sense of a shift from one type of crime to another within the categories of crime covered in this paper. However, the lack  of  high-quality  comparable  data  means  that  we  could  not examine the possibility that a substantial amount of coercive and property crime moved online, parallel to the sudden shift in daily routine activities.</p>
<p>​    Finally, we examined whether variation in the stringency of the lockdown was predictive of the amount of change in crime. Results show  that  more  stringent  limitations  regarding  requirements/recommendations to stay at home were associated with stronger declines in crime levels.The additional analyses suggest that it is mostly the stay-at-home requirements that were associated with larger declines, in that other containment policies were generally not significantly associated with declines, and the use of the overall stringency index generally did not substantially improve the models (Supplementary Table 21). We found few systematic differences in the ‘elasticity’ of different crime categories, that is, in the extent to which variation in the stringency of COVID-19-related restrictions was associated with change in crime levels. This suggests, surprisingly perhaps, that all crime categories included in this analysis responded  similarly  to  variation  in  the  extent  of  constraints  on  daily movement.</p>
<p><img src="Scatterplot.jpg" alt="Lena"></p>
<p>​    Our analyses suggest that stay-at-home policies played a crucial role. However, more fine-tuned analyses would be needed to understand the extent to which other measures <strong>(for example, closing bars, limiting public transport and closing schools</strong>) and variation in their enforcement were associated with variation in crime trends across places within a city.</p>
<p>​    <strong>An important area for future comparative research is to investigate  the  potential  displacement  of  public-space  crimes  to non-contact offences such as fraud and cybercrime, which we were unable to measure here. There is some initial evidence of a significant increase of cybercrime during the strictest period of lockdown in the United Kingdom, which is interpreted as a displacement of crime opportunities from the offline to the online environment. Restrictions on public space may have also led to displacement  of  crime  to  private  space.</strong></p>
<h3 id="Paper-List-That-I-Want-To-Read-After-Reading-This-Study"><a href="#Paper-List-That-I-Want-To-Read-After-Reading-This-Study" class="headerlink" title="Paper List That I Want To Read After Reading This Study"></a>Paper List That I Want To Read After Reading This Study</h3><p>1、<em>Bernasco, W ., Ruiter, S. &amp; Block, R. <strong>Do street robbery location choices vary over time of day or day of week? A test in Chicago.</strong></em> </p>
<p><em>J. Res Crime. Delinq. 54, 244–275 (2017).</em></p>
<p>2、<em>Mohler, G. et al. <strong>Impact of social distancing during COVID-19 pandemic on crime in Los Angeles and Indianapolis.</strong></em></p>
<p> <em>J. Crim. Justice 68, 101692 (2020).</em></p>
]]></content>
      <categories>
        <category>Paper</category>
        <category>Law of time and space</category>
      </categories>
      <tags>
        <tag>COVID-19</tag>
        <tag>Stay-at-home restrictions</tag>
        <tag>Crime</tag>
      </tags>
  </entry>
  <entry>
    <title>After Watching Video About Polar Codes</title>
    <url>/2021/11/03/After-watching-video-about-Polar-Codes/</url>
    <content><![CDATA[<p>今天把昨天在b站上标题为”5G，华为，土耳其——我花了两个月，搞懂了5G背后的秘密”这个视频重新完整的看了一遍。看完之后，结合自己刚开始两个月的研究生生活，有一些感触，在此进行记录。</p>
<p>附上视频链接：</p>
<p>(<a href="https://www.bilibili.com/video/BV1fq4y1g7hq?spm_id_from=333.1007.top_right_bar_window_history.content.click">https://www.bilibili.com/video/BV1fq4y1g7hq?spm_id_from=333.1007.top_right_bar_window_history.content.click</a>)</p>
<span id="more"></span>
<h3 id="颁奖典礼"><a href="#颁奖典礼" class="headerlink" title="颁奖典礼"></a>颁奖典礼</h3><hr>
<p>视频开端讲述了华为总裁任正非为Arikan——the father of Polor Code颁发代表最高荣誉的特别奖奖牌。</p>
<p>极化码——一种新的5G技术，是令华为成为5G时代的领跑者极其重要的部分。</p>
<h3 id="如何度量信息"><a href="#如何度量信息" class="headerlink" title="如何度量信息"></a>如何度量信息</h3><hr>
<p>香农在通信的数学理论中第一次量化了信息，他认为信息的本质是消除信息的不确定性，利用概率的不确定性度量信息，这个不确定度称为：信息熵。</p>
<h3 id="什么是信道容量"><a href="#什么是信道容量" class="headerlink" title="什么是信道容量"></a>什么是信道容量</h3><hr>
<p>信道容量（最大互信息）是Arikan想要达到的目标，信道容量是指单位时间内能传输的信息量，是通信在理论上存在的上限。</p>
<h3 id="什么是编码"><a href="#什么是编码" class="headerlink" title="什么是编码"></a>什么是编码</h3><hr>
<p>为了减弱噪声，对信道进行编码，让信息以更好的方式进行传输。</p>
<h3 id="香农极限"><a href="#香农极限" class="headerlink" title="香农极限"></a>香农极限</h3><hr>
<p>通过正确编码有可能让该信道以速率C传达信息，而错误频率或者疑义度可以小到让人满意，而这一表述对于任何大于C的速率都是不成立的。速率达于C将会是信息有更多的不确定性，因此引出了信息论的中心问题——有噪信道编码定理。</p>
<h3 id="个人的思考"><a href="#个人的思考" class="headerlink" title="个人的思考"></a>个人的思考</h3><hr>
<p>作为一个普通人，如何对展开对陌生知识的学习？</p>
<ul>
<li>寻找有价值的科普资料</li>
<li>如果没有，从头开始——直接寻找该知识/理论的提出者，从他的相关文献内容中找到你所要学习知识的根源。</li>
<li>当你开始读其文献，发现依然无法理解时，尝试从文献的引文入手，深挖其理论根基和来源。</li>
</ul>
<p><img src="Arikanreply.png" alt=""></p>
<p>我们所称赞的，往往只是别人的平淡生活，但伟大往往诞生于平淡之中。</p>
]]></content>
      <categories>
        <category>Thoughts</category>
      </categories>
      <tags>
        <tag>Thoughts</tag>
      </tags>
  </entry>
  <entry>
    <title>Crime Feeds on Legal Activities: Daily Mobility Flows Help to Explain Thieves&#39; Target Location Choices</title>
    <url>/2021/10/28/Crime-Feeds-on-Legal-Activities-Daily-Mobility-Flows-Help-to-Explain-Thieves-Target-Location-Choices/</url>
    <content><![CDATA[<p><strong>Crime Feeds on Legal Activities: Daily Mobility Flows Help to Explain Thieves’ Target Location Choices</strong></p>
<p><em>Guangwen Song1 · Wim Bernasco2,3 · Lin Liu1,4 · Luzi Xiao1 · Suhong Zhou5 ·  Weiwei Liao5</em></p>
<p>The Author(s) 2019</p>
<span id="more"></span>
<p>[toc]</p>
<h1 id="Study-Area"><a href="#Study-Area" class="headerlink" title="Study Area"></a><strong>Study Area</strong></h1><p>​        The data for the present research originates from <u>ZG City</u>, a city located in southeast China. ZG City has a total population in excess of 5 million, and is one of the largest and most developed cities of China.The study area is located in the central part of ZG City, and covers more than 3000 kilometers . </p>
<h1 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a><strong>Theory</strong></h1><h3 id="Crime-Location-Choice"><a href="#Crime-Location-Choice" class="headerlink" title="Crime Location Choice"></a><em>Crime Location Choice</em></h3><p>​        Crime location choice refers to an offender’s choice of where to perpetrate a crime (two  recent reviews are Bernasco and Ruiter 2014; Ruiter 2017).</p>
<h3 id="Distance-and-Awareness-Space"><a href="#Distance-and-Awareness-Space" class="headerlink" title="Distance and Awareness Space"></a><em>Distance and Awareness Space</em></h3><p>​        Of all factors that affect crime location choices, distance is by far the most influential. Distance might also be considered a proxy measure of the offenders’ awareness space.</p>
<h3 id="Crime-Generators"><a href="#Crime-Generators" class="headerlink" title="Crime Generators"></a><em>Crime Generators</em></h3><p>​        Crime generators and crime attractors are concepts in crime pattern theory that potentially play an important role in crime location choices. </p>
<h3 id="Social-Disorganization"><a href="#Social-Disorganization" class="headerlink" title="Social Disorganization"></a><em>Social Disorganization</em></h3><p>​        Social disorganization has been identified as a community attribute that can apply to geographic areas of various sizes (e.g. street blocks, neighborhoods or districts). </p>
<h3 id="Mobility-Flows"><a href="#Mobility-Flows" class="headerlink" title="Mobility Flows"></a><em>Mobility Flows</em></h3><p>​        According to opportunity theories of crime, the mobility of offenders is conditioned by the  mobility of the general population (Cohen and Felson 1979).</p>
<h1 id="Data-and-Methods"><a href="#Data-and-Methods" class="headerlink" title="Data and Methods"></a><strong>Data and Methods</strong></h1><h3 id="Crime-Data-Theft-from-the-Person"><a href="#Crime-Data-Theft-from-the-Person" class="headerlink" title="Crime Data: Theft from the Person"></a><em>Crime Data: Theft from the Person</em></h3><p>​        Registered crime data were obtained from the police authorities of ZG City. All crime data  are recorded incidents of theft from the person (TFP) in which at least one offender was  arrested and prosecuted. It includes the date of the incident and the home addresses of the  offenders and the location where the offence was committed.</p>
<h3 id="Crime-Generators-1"><a href="#Crime-Generators-1" class="headerlink" title="Crime Generators"></a><em>Crime Generators</em></h3><p>​        The list of potential crime generators is sheer endless, but included are those facilities  that seem most relevant based on the extant literature and taking into account the Chinese  context: the numbers of primary schools, middle schools, hospitals, basic stores, markets,  supermarkets, restaurants, cinemas, bars, banks, subway stations and bus stops per census unit. </p>
<h3 id="Mobile-Phone-Data"><a href="#Mobile-Phone-Data" class="headerlink" title="Mobile Phone Data"></a><em>Mobile Phone Data</em></h3><p>​        To measure population mobility across the study area, we use the tracked data of mobile  phone users.</p>
<h3 id="Calculation-of-Mobility-Streams"><a href="#Calculation-of-Mobility-Streams" class="headerlink" title="Calculation of Mobility Streams"></a><em>Calculation of Mobility Streams</em></h3><p>​        The resulting information was subsequently used to construct a measure of the volume of  mobility flows between all pairs of census units. The measure is defined as the number of  unique mobile phone users that visited both census units on the same day. Mobility flows  were calculated by summing phone users over all pairs of census units.</p>
<h1 id="Models"><a href="#Models" class="headerlink" title="Models"></a><strong>Models</strong></h1><p>​        Following the large majority of previous location choice studies, we used the conditional  logit model to analyze the role of distance, crime generators and daily population mobility  in the offenders’ choice of locations for committing TFP. </p>
<p>​        To  judge relative fit between multiple models, we use MdFadden’s Pseudo R2 , the Akaike’s  information criterion (AIC) and the Bayesian information criterion (BIC) as benchmarks.</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a><strong>Conclusion</strong></h1><p>​        The mobility flow measure is a useful addition to the estimated effects of distance and crime generators. It predicts the locations of thefts much better than the presence  of crime generators does. However, it does not replace the role of distance, suggesting that  offenders are more spatially restricted than others, or that even within their activity spaces  they prefer to offend near their homes.</p>
]]></content>
      <categories>
        <category>Paper</category>
        <category>Mechanism research</category>
      </categories>
      <tags>
        <tag>Crime location choice</tag>
        <tag>Theft from the person</tag>
        <tag>Mobility</tag>
        <tag>Routine activities</tag>
      </tags>
  </entry>
  <entry>
    <title>Density-Based Spatial Clustering of Applications with Noise(DBSCAN)算法</title>
    <url>/2022/10/14/Density-Based-Spatial-Clustering-of-Applications-with-Noise-DBSCAN-%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>DBSCAN 的原理、流程、参数设置、优缺点</p>
<blockquote>
<p>Some of us get dipped in flat, some in satin, some in gloss. But every once in a while you find someone who’s iridescent, and when you do, nothing will ever compare. —— 《Flipped》</p>
</blockquote>
<span id="more"></span>
<h1 id="DBSCAN"><a href="#DBSCAN" class="headerlink" title="DBSCAN"></a>DBSCAN</h1><h2 id="DBSCAN-简介"><a href="#DBSCAN-简介" class="headerlink" title="DBSCAN 简介"></a>DBSCAN 简介</h2><p>DBSCAN(Density-based spatial clustering ofapplications with noise)是Martin Ester, Hans-PeterKriegel等人于1996年提出的一种基于密度的空间的数据聚类方法，该算法是最常用的一种聚类方法。该算法将具有足够密度区域作为距离中心，不断生长该区域。</p>
<p>算法基于一个事实：一个聚类可以由其中的任何核心对象唯一确定。该算法利用基于密度的聚类的概念，即要求聚类空间中的一定区域内所包含对象（点或其他空间对象）的数目不小于某一给定阈值。该方法能在具有噪声的空间数据库中发现任意形状的簇，可将密度足够大的相邻区域连接，能有效处理异常数据，主要用于对空间数据的聚类，优缺点总结如下:</p>
<p>优点：</p>
<ol>
<li>聚类速度快且能够有效处理噪声点和发现任意形状的空间聚类；</li>
<li>与K-MEANS比较起来，不需要输入要划分的聚类个数；</li>
<li>聚类簇的形状没有偏倚；</li>
<li>可以在需要时输入过滤噪声的参数。</li>
</ol>
<p>缺点：</p>
<ol>
<li>当数据量增大时，要求较大的内存支持I/O消耗也很大；</li>
<li>当空间聚类的密度不均匀、聚类间距差相差很大时，聚类质量较差，因为这种情况下参数MinPts和Eps选取困难。</li>
<li>算法聚类效果依赖与距离公式选取，实际应用中常用欧式距离，对于高维数据，存在“维数灾难”。</li>
</ol>
<h2 id="DBSCAN-基本概念"><a href="#DBSCAN-基本概念" class="headerlink" title="DBSCAN 基本概念"></a>DBSCAN 基本概念</h2><ol>
<li><strong>Eps 邻域：</strong>给定对象半径 Eps 内的邻域称为该对象的 Eps 邻域；</li>
<li><strong>核心点（core point）：</strong>如果对象的 Eps 邻域至少包含最小数目 MinPts 的对象，则称该对象为核心对象；</li>
<li><strong>边界点（edge point）：</strong>边界点不是核心点，但落在某个核心点的邻域内；</li>
<li><strong>噪音点（outlier point）：</strong>既不是核心点，也不是边界点的任何点；</li>
<li><strong>直接密度可达(directly density-reachable)：</strong>给定一个对象集合D，如果 p 在 q 的 Eps 邻域内，而 q 是一个核心对象，则称对象 p 从对象 q 出发时是直接密度可达的；</li>
<li><strong>密度可达(density-reachable)：</strong>如果存在一个对象链  p1, …,pi,.., pn，满足p1 = p 和pn = q，pi是从pi+1关于 Eps 和 MinPts 直接密度可达的，则对象p是从对象q关于 Eps 和 MinPts 密度可达的；</li>
<li><strong>密度相连(density-connected)：</strong>如果存在对象 O∈D，使对象 p 和 q 都是从 O 关于 Eps 和MinPts 密度可达的，那么对象 p 到 q 是关于 Eps 和 MinPts 密度相连的；</li>
</ol>
<p>（8）类（cluster）:设非空集合,若满足：，</p>
<p>（a），且从密度可达，那么。<br>（b）和密度相连。<br>则称构成一个类簇</p>
<p>有关核心点、边界点、噪音点以及直接密度可达、密度可达和密度相连解释如图1[1]：</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Go language</title>
    <url>/2021/11/13/Go-language/</url>
    <content><![CDATA[<p>Go语言的特性：</p>
<ul>
<li>简化问题，利于学习</li>
<li>内存管理，简介语法，易于使用</li>
<li>快速编译，高效并发</li>
<li>高效执行</li>
<li>并发支持，轻松驾驭</li>
<li>标准类库，规范统一</li>
<li>易于部署</li>
<li>文档全面</li>
<li>免费开源</li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>GitBug总结</title>
    <url>/2023/06/13/GitBug%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Git Bug 总结和解决方案</p>
<span id="more"></span>
<h1 id="Git-Bug"><a href="#Git-Bug" class="headerlink" title="Git Bug"></a>Git Bug</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// git 提交报错</span><br><span class="line">fatal: unable to access &#x27;https://github.com/Nickzxw/Nickzxw.github.io.git/&#x27;: Failed to connect to github.com port 443 after 21047 ms: Timed out</span><br></pre></td></tr></table></figure>
<p>问题：远程库和本地库不一致</p>
<p>解决方案：将远程库 clone 到本地，然后再进行修改，然后再次 push</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR Cannot find module &#x27;hexo&#x27; from</span><br></pre></td></tr></table></figure>
<p>切换文件夹忘记重新安装 hexo 了</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang Web</title>
    <url>/2021/11/22/Golang-Web/</url>
    <content><![CDATA[<p>七天用Go实现Web框架—复现</p>
<span id="more"></span>
<h3 id="设计一个Web框架"><a href="#设计一个Web框架" class="headerlink" title="设计一个Web框架"></a>设计一个Web框架</h3><p>​    在实现Web应用的时候为什么要使用框架（Beego、Gin、Iris），为何不直接用标准库实现。</p>
<p>​    先看看标准库<strong>net/http</strong>如何处理一个请求。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/count&quot;</span>, counter)</span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">&quot;localhost:8000&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;URL.Path = %q\n&quot;</span>, r.URL.Path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>net/http</strong>提供了基础的Web功能，即监听端口、映射静态路由、解析HTTP报文等。</p>
<p>然而Web开发中简单的需求并不支持，需要手工实现。</p>
<ul>
<li>动态路由：例如webPages/:name，webPages/*这类规则。</li>
<li>鉴权：指验证用户是否拥有访问系统的权力。</li>
<li>模板：统一简化的HTML机制</li>
<li>…</li>
</ul>
<p>基于Python著名的Web框架bottle，通过这个框架提供的特性，有助于理解框架的核心能力。</p>
<ul>
<li>路由（Routing）：将请求映射到函数，支持动态路由。</li>
<li>模板（Templates）：使用内置模板引擎提供模板渲染机制。</li>
<li>工具集（Utilites）：提供对cookies，headers等的处理机制。</li>
<li>插件（Plusgin）：</li>
<li>…</li>
</ul>
<h3 id="Gee框架"><a href="#Gee框架" class="headerlink" title="Gee框架"></a>Gee框架</h3><p><strong>Gee</strong>框架来源于geektutu.com的前三个字母，作者第一次接触Go语言的Web框架是<strong>Gin</strong>，Gin的代码总共是14K，期中测试代码9K，实际代码量5K。Gin框架与Python中的<strong>Flask</strong>框架很相似。</p>
<h3 id="Web框架Gee—第一天：HTTP基础"><a href="#Web框架Gee—第一天：HTTP基础" class="headerlink" title="Web框架Gee—第一天：HTTP基础"></a>Web框架Gee—第一天：HTTP基础</h3><ul>
<li>简单学习<strong>net/http</strong>库以及http.Handler接口。</li>
<li>搭建<strong>Gee</strong>框架的雏形，代码约50行。</li>
</ul>
<h4 id="标准库启动Web服务"><a href="#标准库启动Web服务" class="headerlink" title="标准库启动Web服务"></a>标准库启动Web服务</h4><p>通过Go语言内置的net/http库，封装了HTTP网络编程的基础接口，Gee-Web框架便是基于net/http。</p>
<p><strong>day1-http-base/base1/main.go</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// header echoes r.URL.Path</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexHandler</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span>&#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">&quot;URL.Path = %q\n&quot;</span>, req.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// headler echoes r.URL.Header</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span>  &#123;</span><br><span class="line">	<span class="keyword">for</span> key, value := <span class="keyword">range</span> req.Header&#123;</span><br><span class="line">		fmt.Fprintf(w, <span class="string">&quot;Header[%q] = %q\n&quot;</span>, key, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/&quot;</span>, indexHandler)</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, helloHandler)</span><br><span class="line">	log.Fatal(http.ListenAndServe(<span class="string">&quot;:9999&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码设置了两个路由，/和/hello， 分别绑定<em>indexHandler</em>和<em>helloHandler</em>，根据不同的HTTP请求会调用不同的处理函数。访问/，响应式URL.Path = /，而/hello的响应则是请求头(header)中的键值对信息。</p>
<p><strong>PS: 先编译运行main.go文件，再在控制台使用curl工具进行测试</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl http://localhost:9999/</span><br><span class="line">URL.Path = &quot;/&quot;</span><br><span class="line">$ curl http://localhost:9999/hello</span><br><span class="line">Header[&quot;Accept&quot;] = [&quot;*/*&quot;]</span><br><span class="line">Header[&quot;User-Agent&quot;] = [&quot;curl/7.54.0&quot;]</span><br></pre></td></tr></table></figure>
<p><em>main</em>函数的最后一行，用来启动Web服务，第一个参数是地址，:9999表示在9999端口监听。第二个参数代表处理所有的HTTP请求的实例，nil代表使用标准库中的实例处理。</p>
<h4 id="实现http-Handler接口"><a href="#实现http-Handler接口" class="headerlink" title="实现http.Handler接口"></a>实现http.Handler接口</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> http</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">    ServeHTTP(w ResponseWriter, r *Request)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(address <span class="keyword">string</span>, h Handler)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure>
<p>通过net/http源码可以发现，Handler是一个接口，需要实现方法<em>ServeHTTP</em>,只要传入任何实现了ServeHTTP接口的实例，所有的HTTP请求都将交给该实例处理</p>
<p><strong>day1-http-base/base2/main.go</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;log&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span>&#123;</span><br><span class="line">   <span class="keyword">switch</span>  req.URL.Path &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">      fmt.Fprintf(w, <span class="string">&quot;URL.Path = %q\n&quot;</span>, req.URL.Path)</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&quot;/hello&quot;</span>:</span><br><span class="line">      <span class="keyword">for</span> key, value := <span class="keyword">range</span> req.Header&#123;</span><br><span class="line">         fmt.Fprintf(w, <span class="string">&quot;Header[%q] = %q\n&quot;</span>, key, value)</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">      fmt.Fprintf(w, <span class="string">&quot;404 NOT FOUND: %s\n&quot;</span>, req.URL)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">   engine := <span class="built_in">new</span>(Engine)</span><br><span class="line">   log.Fatal(http.ListenAndServe(<span class="string">&quot;:9999&quot;</span>, engine))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里定义了一个空的结构体Engine，实现了方法ServeHTTP。这个方法有两个参数，第二个参数是<strong><em>Request</em></strong>，该对象包含了该HTTP请求的所有信息，例如请求地址、Header和Body等信息；第一个参数是 <strong><em>ResponseWriter</em></strong> ，利用 <strong><em>ResponseWriter</em></strong> 可以构造针对该请求的响应。</li>
<li>在<em>main</em>函数中，给<em>ListenAndServe</em>方法的第二个参数传入了刚才创建的engine实例。<strong>至此，实现了Web框架的第一步，将所有的HTTP请求转向了我们自己的处理逻辑。</strong>实现Engine之前，通过调用<strong><em>http.HandleFunc</em></strong>实现了路由和Handler的映射，也就是只能针对具体的路由来写处理逻辑。例如/hello。但是实现Engine之后，我们拦截了所有的HTTP请求，有了统一的控制入口。在这里可以自由定义路由映射的规则，也可以统一添加一些处理逻辑，例如日志、异常处理等等。</li>
</ul>
<h4 id="Gee框架的雏形"><a href="#Gee框架的雏形" class="headerlink" title="Gee框架的雏形"></a>Gee框架的雏形</h4><p>通过重新组织上面的代码，搭建出整个框架的雏形。</p>
<p>代码目录结构为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gee/</span><br><span class="line">  |--gee.go</span><br><span class="line">  |--go.mod</span><br><span class="line">main.go</span><br><span class="line">go.mod</span><br></pre></td></tr></table></figure>
<p><strong>go.mod</strong></p>
<p><strong>day1-http-base/base3/go.mod</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module base3</span><br><span class="line"></span><br><span class="line">go 1.17</span><br><span class="line"></span><br><span class="line">require gee v0.0.0</span><br><span class="line"></span><br><span class="line">replace gee =&gt; ./gee</span><br></pre></td></tr></table></figure>
<ul>
<li>在go,mod中使用replace将gee指向./gee</li>
</ul>
<p><strong>main.go</strong></p>
<p><strong>day1-http-base/base3/main.go</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;gee&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">   r := gee.New()</span><br><span class="line">   r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">      fmt.Fprintf(w, <span class="string">&quot;URL.Path = %q\n&quot;</span>, req.URL.Path)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   r.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">      <span class="keyword">for</span> key, value := <span class="keyword">range</span> req.Header&#123;</span><br><span class="line">         fmt.Fprintf(w, <span class="string">&quot;Header[%q] = %q\n&quot;</span>, key, value)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   r.Run(<span class="string">&quot;:9999&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Gee</code>框架的设计以及API均参考了<code>Gin</code>。使用<code>New()</code>创建 gee 的实例，使用 <code>GET()</code>方法添加路由，最后使用<code>Run()</code>启动Web服务。这里的路由，只是静态路由，不支持<code>/hello/:name</code>这样的动态路由。</p>
<p><strong>gee.go</strong></p>
<p><strong>day1-http-base/base3/gee/gee.go</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// HandlerFunc defines the request handler used by gee</span></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Engine implement the interface of ServerHTTP</span></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">// 建立路由映射表</span></span><br><span class="line">   router <span class="keyword">map</span>[<span class="keyword">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// New is the constructor of gee.Engine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> *<span class="title">Engine</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> &amp;Engine&#123;router: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">addRoute</span><span class="params">(method <span class="keyword">string</span>, pattern <span class="keyword">string</span>, handler HandlerFunc)</span></span> &#123;</span><br><span class="line">   key := method + <span class="string">&quot;-&quot;</span> + pattern</span><br><span class="line">   engine.router[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET defines the method to add GET request</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">GET</span><span class="params">(pattern <span class="keyword">string</span>, handler HandlerFunc)</span></span> &#123;</span><br><span class="line">   engine.addRoute(<span class="string">&quot;Get&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST defines the method to add POST request</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">POST</span><span class="params">(pattern <span class="keyword">string</span>, handler HandlerFunc)</span></span> &#123;</span><br><span class="line">   engine.addRoute(<span class="string">&quot;POST&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run defines the method to start a http server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">Run</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span>  &#123;</span><br><span class="line">   key := req.Method + <span class="string">&quot;-&quot;</span> + req.URL.Path</span><br><span class="line">   <span class="keyword">if</span> handler, ok := engine.router[key]; ok&#123;</span><br><span class="line">      handler(w, req)</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      w.WriteHeader(http.StatusNotFound)</span><br><span class="line">      fmt.Fprintf(w, <span class="string">&quot;404 NOT FOUND: %s \n&quot;</span>, req.URL)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>gee.go的实现：</p>
<ul>
<li>首先定义了类型<code>HandlerFunc</code>，这是提供给框架用户的，用来定义路由映射的处理方法。我们在<code>Engine</code>中，添加了一张路由映射表<code>router</code>，key 由请求方法和静态路由地址构成，例如<code>GET-/</code>、<code>GET-/hello</code>、<code>POST-/hello</code>，这样针对相同的路由，如果请求方法不同,可以映射不同的处理方法(Handler)，value 是用户映射的处理方法。</li>
<li>当用户调用<code>(*Engine).GET()</code>方法时，会将路由和处理方法注册到映射表 <em>router</em> 中，<code>(*Engine).Run()</code>方法，是 <em>ListenAndServe</em> 的包装。</li>
<li><code>Engine</code>实现的 <em>ServeHTTP</em> 方法的作用就是，解析请求的路径，查找路由映射表，如果查到就执行注册的处理方法；如果查不到，就返回 <em>404 NOT FOUND</em> 。</li>
</ul>
<p>至此，整个<code>Gee</code>框架的原型已经出来了。实现了路由映射表，提供了用户注册静态路由的方法，包装了启动服务的函数。当然，到目前为止，我们还没有实现比<code>net/http</code>标准库更强大的能力，后面可以将动态路由、中间件等功能添加上去了。</p>
<h3 id="Web框架Gee—第二天：上下文"><a href="#Web框架Gee—第二天：上下文" class="headerlink" title="Web框架Gee—第二天：上下文"></a>Web框架Gee—第二天：上下文</h3><p>任务实现：</p>
<ul>
<li>将<code>路由(router)</code>独立出来，方便之后进行功能扩充。</li>
<li>设计<code>上下文（Context）</code>，封装Request和Response，提供对JSON、HTML等返回类型的支持。</li>
<li>框架代码新增约90行</li>
</ul>
<h4 id="设计Context"><a href="#设计Context" class="headerlink" title="设计Context"></a>设计Context</h4><p><strong>必要性</strong></p>
<ol>
<li>Web服务，主要是根据请求<code>*http.Request</code>，构造响应<code>http.ResponseWriter</code>。但由于这两个对象提供的接口粒度太小，要想构造完整的响应，需要考虑信息头（Header）和消息体（Body），而Header又包含了状态码（StatusCode）和消息类型（ContentType）等几乎每次请求都需要设置的信息。</li>
<li>针对使用场景，封装<code>*http.Request</code>和<code>http.ResponseWriter</code>的方法，简化相关接口的调用，只是设计Context的原因之一，框架需要支撑额外的功能。例如，将来解析动态路由<code>/webPage:name</code>，参数<code>:name</code>需要放在哪里，再比如框架需要支持中间件，中间件产生的信息存储在何处？Context随着每一个请求的出现而产生，请求的结束而销毁，当前请求强相关的信息都有Context承载。</li>
</ol>
<p><strong>具体实现</strong></p>
<p><strong>day2-context/gee/context.go</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> H <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">// origin objects</span></span><br><span class="line">   Writer http.ResponseWriter</span><br><span class="line">   Req    *http.Request</span><br><span class="line">   <span class="comment">// request info</span></span><br><span class="line">   Path   <span class="keyword">string</span></span><br><span class="line">   Method <span class="keyword">string</span></span><br><span class="line">   <span class="comment">// response info</span></span><br><span class="line">   StatusCode <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newContext</span><span class="params">(w http.ResponseWriter, req *http.Request)</span> *<span class="title">Context</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> &amp;Context&#123;</span><br><span class="line">      Writer: w,</span><br><span class="line">      Req:    req,</span><br><span class="line">      Path:   req.URL.Path,</span><br><span class="line">      Method: req.Method,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">PostForm</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> c.Req.FormValue(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">Query</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> c.Req.URL.Query().Get(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">Status</span><span class="params">(code <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   c.StatusCode = code</span><br><span class="line">   c.Writer.WriteHeader(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">SetHeader</span><span class="params">(key <span class="keyword">string</span>, value <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">   c.Writer.Header().Set(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">String</span><span class="params">(code <span class="keyword">int</span>, format <span class="keyword">string</span>, values ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">   c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">   c.Status(code)</span><br><span class="line">   c.Writer.Write([]<span class="keyword">byte</span>(fmt.Sprintf(format, values...)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">JSON</span><span class="params">(code <span class="keyword">int</span>, obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">   c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">   c.Status(code)</span><br><span class="line">   encoder := json.NewEncoder(c.Writer)</span><br><span class="line">   <span class="keyword">if</span> err := encoder.Encode(obj); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      http.Error(c.Writer, err.Error(), <span class="number">500</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">Data</span><span class="params">(code <span class="keyword">int</span>, data []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">   c.Status(code)</span><br><span class="line">   c.Writer.Write(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">HTML</span><span class="params">(code <span class="keyword">int</span>, html <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">   c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">   c.Status(code)</span><br><span class="line">   c.Writer.Write([]<span class="keyword">byte</span>(html))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>代码开头给<code>map[string]interface&#123;&#125;</code>起了别名<code>gee.h</code>，构建JSON数据时，会更简洁。</li>
</ul>
<p><strong>JSON数据封装前：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">obj = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;geektutu&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1234&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">encoder := json.NewEncoder(w)</span><br><span class="line"><span class="keyword">if</span> err := encoder.Encode(obj); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>封装后：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c.JSON(http.StatusOK, gee.H&#123;</span><br><span class="line">   <span class="string">&quot;username&quot;</span>: c.PostForm(<span class="string">&quot;username&quot;</span>),</span><br><span class="line">   <span class="string">&quot;password&quot;</span>: c.PostForm(<span class="string">&quot;password&quot;</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Context</code>目前只包含了<code>http.ResponseWriter</code>和<code>*http.Request</code>，另外提供对Method和Path这两个常用属性的直接访问。</li>
<li>提供了访问Query和PostForm参数的方法。</li>
<li>提供了快速构造String/Data/JSON/HTML响应的方法。</li>
</ul>
<h4 id="路由-Router"><a href="#路由-Router" class="headerlink" title="路由(Router)"></a>路由(Router)</h4><p>将路由相关方法和结构提取出来，存储在新文件<code>router.go</code>，方便后续进行功能扩充，例如提供动态路由的支持。router的handle方法做了细微的调整，handle的参数变成了Context。</p>
<p><strong>day2-context/gee/router.go</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;log&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> router <span class="keyword">struct</span> &#123;</span><br><span class="line">   handlers <span class="keyword">map</span>[<span class="keyword">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newRouter</span><span class="params">()</span> *<span class="title">router</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> &amp;router&#123;handlers: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span> <span class="title">addRoute</span><span class="params">(method <span class="keyword">string</span>, pattern <span class="keyword">string</span>, handler HandlerFunc)</span></span> &#123;</span><br><span class="line">   log.Printf(<span class="string">&quot;Route %4s - %s&quot;</span>, method, pattern)</span><br><span class="line">   key := method + <span class="string">&quot;-&quot;</span> + pattern</span><br><span class="line">   r.handlers[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span> <span class="title">handle</span><span class="params">(c *Context)</span></span> &#123;</span><br><span class="line">   key := c.Method + <span class="string">&quot;-&quot;</span> + c.Path</span><br><span class="line">   <span class="keyword">if</span> handler, ok := r.handlers[key]; ok &#123;</span><br><span class="line">      handler(c)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      c.String(http.StatusNotFound, <span class="string">&quot;404 NOT FOUND: %s\n&quot;</span>, c.Path)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="框架入口"><a href="#框架入口" class="headerlink" title="框架入口"></a>框架入口</h4><p><strong>day2-context/gee/gee.go</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// HandlerFunc defines the request handler used by gee</span></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*Context)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Engine implement the interface of ServeHTTP</span></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">   router *router</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New is the constructor of gee.Engine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> *<span class="title">Engine</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> &amp;Engine&#123;router: newRouter()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">addRoute</span><span class="params">(method <span class="keyword">string</span>, pattern <span class="keyword">string</span>, handler HandlerFunc)</span></span> &#123;</span><br><span class="line">   engine.router.addRoute(method, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET defines the method to add GET request</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">GET</span><span class="params">(pattern <span class="keyword">string</span>, handler HandlerFunc)</span></span> &#123;</span><br><span class="line">   engine.addRoute(<span class="string">&quot;GET&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST defines the method to add POST request</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">POST</span><span class="params">(pattern <span class="keyword">string</span>, handler HandlerFunc)</span></span> &#123;</span><br><span class="line">   engine.addRoute(<span class="string">&quot;POST&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run defines the method to start a http server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">Run</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">   c := newContext(w, req)</span><br><span class="line">   engine.router.handle(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将<code>router</code>相关代码独立后，<code>gee.go</code>简单了，并且通过实现ServerHTTP接口，接管了所有HTTP请求。调用router.handle之前构造了Context对象。</p>
<p><strong>day2-context/main.go</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;gee&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   r := gee.New()</span><br><span class="line">   r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gee.Context)</span></span> &#123;</span><br><span class="line">      c.HTML(http.StatusOK, <span class="string">&quot;&lt;h1&gt;Hello Gee&lt;/h1&gt;&quot;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   r.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gee.Context)</span></span> &#123;</span><br><span class="line">      c.String(http.StatusOK, <span class="string">&quot;hello %s, you&#x27;re at %s\n&quot;</span>, c.Query(<span class="string">&quot;name&quot;</span>), c.Path)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   r.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gee.Context)</span></span> &#123;</span><br><span class="line">      c.JSON(http.StatusOK, gee.H&#123;</span><br><span class="line">         <span class="string">&quot;username&quot;</span>: c.PostForm(<span class="string">&quot;username&quot;</span>),</span><br><span class="line">         <span class="string">&quot;password&quot;</span>: c.PostForm(<span class="string">&quot;password&quot;</span>),</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   r.Run(<span class="string">&quot;:9999&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>借助curl，展示下今天的成果！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -i http://localhost:9999/</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Date: Wed, 24 Nov 2021 09:33:46 GMT</span><br><span class="line">Content-Length: 18</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">&lt;h1&gt;Hello Nick&lt;/h1&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl <span class="string">&quot;http://localhost:9999/hello?name=X.Zhang&quot;</span></span></span><br><span class="line">hello X.Zhang, you&#x27;re at /hello</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST <span class="string">&quot;http://localhost:9999/login&quot;</span> -d <span class="string">&quot;username=geektutu&amp;password=1234&quot;</span></span></span><br><span class="line">&#123;&quot;password&quot;:&quot;6666&quot;,&quot;username&quot;:&quot;zhangxuewei&quot;&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl <span class="string">&quot;http://localhost:9999/xxx&quot;</span></span></span><br><span class="line">404 NOT FOUND: /xxx</span><br></pre></td></tr></table></figure>
<p>PS: 在Goland内使用控制台运行会出错显示找不到X匹配的参数</p>
<p>解决方案: 使用Windows自带cmd运行即可</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Inspired From Professor Song</title>
    <url>/2021/11/12/Inspires-From-Professer-Song/</url>
    <content><![CDATA[<p>This blog aim to record some inspiration from Professor Song after we having lunch or dinner together.</p>
<span id="more"></span>
<h3 id="2011-11-12"><a href="#2011-11-12" class="headerlink" title="2011.11.12"></a>2011.11.12</h3><ol>
<li>People who are not be jealous are mediocre.</li>
<li>When you encounter setbacks, set a threshold for yourself.</li>
<li>Before you understand everything, learn to be patient.</li>
<li>You need to have a sense of rhythm when you do anything.</li>
</ol>
]]></content>
      <categories>
        <category>Thoughts</category>
      </categories>
      <tags>
        <tag>Thoughts</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo - How to hexo blog and submit it to github.</title>
    <url>/2021/10/25/How-to-hexo-blog/</url>
    <content><![CDATA[<p>An article about how to use hexo to write a blog !</p>
<span id="more"></span>
<h1 id="Make-a-new-document"><a href="#Make-a-new-document" class="headerlink" title="Make a new document"></a>Make a new document</h1><p>If our file’s name is “hello hexo”, you can type the following command in <strong>Git GUI</strong> to create  a new file.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;hello hexo&quot;</span><br></pre></td></tr></table></figure>
<p>The result of the command is to create a new “hello-hexo.md” file under the <strong>PATH:</strong> ./hexo/sourse/_post.</p>
<p>Then we can start our writing!</p>
<h1 id="Document-format"><a href="#Document-format" class="headerlink" title="Document format"></a>Document format</h1><p>We use the Text Editor to open the new file “hello-hexo.md”.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello hexo</span><br><span class="line">date: 2021-10-25 20:51:15</span><br><span class="line">tags: </span><br><span class="line"><span class="section">categories: </span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>The text of <strong>title</strong> is the file name and the title of the article.</p>
<p>And the value of the <strong>date</strong> is the local time when we created the file.</p>
<p>Besides, the value of <strong>tags</strong> is the label of the file, you can assign the value to the file at will. Like:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello hexo</span><br><span class="line">date: 2021-10-25 20:51:15</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">-</span> hello</span><br><span class="line"><span class="bullet">-</span> hexo</span><br><span class="line"><span class="bullet">-</span> markdown</span><br><span class="line"><span class="section">categories: </span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>In the end, <strong>categories</strong> are used to categorize articles.</p>
<h1 id="Resource-reference"><a href="#Resource-reference" class="headerlink" title="Resource reference"></a>Resource reference</h1><p>Sometimes we will want to insert a picture to our blog.</p>
<p>You will have two options:</p>
<ol>
<li>Use absolute paths to reference resources.</li>
<li>Use relative paths to reference resources</li>
</ol>
<h2 id="Article-resource-folder"><a href="#Article-resource-folder" class="headerlink" title="Article resource folder"></a>Article resource folder</h2><p>If you use the relative paths to reference resources, you can use the article resource folder provided from Hexo.</p>
<p>Use the text editor to open the <strong>“_config.yml”</strong> file in the root directory, and set the <strong>“post_asset_folder”</strong>  values to true</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">post<span class="emphasis">_asset_</span>folder: true</span><br></pre></td></tr></table></figure>
<p>Then when you type <code>hexo new filename</code>, Hexo will create a new directory to allow us to save our resources.</p>
<h2 id="Tag-plugin"><a href="#Tag-plugin" class="headerlink" title="Tag plugin"></a>Tag plugin</h2><p>We can reference pictures and other resources by using the tag plugin provided by Hexo.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">&#123;% asset<span class="emphasis">_path slug %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% asset_</span>img slug [ title ] %&#125;</span><br><span class="line"><span class="section">&#123;% asset<span class="emphasis">_link slug [ title ] %&#125;</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure>
<p>The correct way to cite pictures:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section">&#123;% asset<span class="emphasis">_img example.jpg This is an example image %&#125;</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure>
<h1 id="Article-Summary"><a href="#Article-Summary" class="headerlink" title="Article Summary"></a>Article Summary</h1><p>In order to set the article summary, we only need to add <code>&lt;!-- more --&gt;</code> after the content that we want to display as a summary. Like:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello hexo</span><br><span class="line">date: 2021-10-25 20:51:15</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">-</span> hello</span><br><span class="line"><span class="bullet">-</span> hexo</span><br><span class="line"><span class="bullet">-</span> markdown</span><br><span class="line"><span class="section">categories: </span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">Article summary</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">Text content</span><br></pre></td></tr></table></figure>
<h1 id="Submit-It-To-Gihub"><a href="#Submit-It-To-Gihub" class="headerlink" title="Submit It To Gihub"></a>Submit It To Gihub</h1><p>Master branch:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>
<p>Hexo branch:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">git add.</span><br><span class="line">git commit -m &quot;your description&quot;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Location-Choice-of-Snatching-Offenders-in-Chennai-City</title>
    <url>/2021/11/10/Location-Choice-of-Snatching-Offenders-in-Chennai-City/</url>
    <content><![CDATA[<p><strong>Location Choice of Snatching Offenders in Chennai City</strong></p>
<p><em>K. Kuralarasan1  · Wim Bernasco2,3</em></p>
<p>Accepted: 21 April 2021<br>© The Author(s) 2021</p>
<span id="more"></span>
<h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a><strong>Abstract</strong></h3><h4 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h4><p>​    This study aim to test the applicability of crime pattern theory in an Indian urbancontext by assessing the effects of offender residence, prior offending locations and presence of crime generators and crime attractors on where offenders commit offences.</p>
<h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4><p>​    The data comprise 1573 police-recorded snatching offenses committed by 1152 identified offenders across the 201 wards of Chennai City. We used discrete crime location choice models to establish the choice criteria that snatching offenders use when they decide where to offend. Data on the locations retail businesses, religious and transportation facilities were collected using Google location services.</p>
<h4 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h4><p>​    The results confirm that snatching offenders prefer to target locations closerto their residence and that they prefer to re-offend at or near their prior offendinglocations. The findings also demonstrate that some but not all crime attractors andgenerators influence the location choice of snatching offenders.</p>
<h4 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h4><p>​    By replicating in an Indian context previously published crime locationchoice findings, our findings support the generality of crime pattern theory. We discuss limitations and make suggestions for future investigations</p>
<h3 id="Data-and-Methods"><a href="#Data-and-Methods" class="headerlink" title="Data and Methods"></a>Data and Methods</h3><h4 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h4><h4 id="Study-Area"><a href="#Study-Area" class="headerlink" title="Study Area"></a>Study Area</h4><p>​    The study area for the present research is the Greater Chennai City Corporation, a metropolitan area with a population of over 6.6 million during the latest census in 2011. It consists of 201 wards with an average surface area of 2.18  km2 (quartiles 0.97, 1.61 and 2.53) and an average population of 33,195 (quartiles 21,451, 36,560 and 43,622). </p>
<h4 id="Crime-Data"><a href="#Crime-Data" class="headerlink" title="Crime Data"></a>Crime Data</h4><p>​    We investigate all detected snatching offenses from August 2010 to July 2017 committed in the study area committed by offenders who lived in the study area.The offense data were obtained from the State Crime Records Bureau, Tamil Nadu, India. They include the time, date, and location of all recorded and detected snatching offenses, and they also contain the age, gender and address of the offender. The data consist of 1573 snatching offenses committed by 1152 offenders.</p>
<p>​    Based on the recorded dates of the crimes, for each snatching offense the number of prior snatching offenses committed by the same offender was determined per ward. Thus, for each snatching offense it was recorded in which wards each of the offender’s previous snatching offenses (if any) had been committed. <strong>(Using the same dates of the crimes to determine repeat offending?)</strong></p>
<p>​    Table 1 presents descriptive information about the 1573 analyzed snatching offenses, including the age and gender of the offender, and whether it was committed in the offender’s own ward of residence.</p>
<p><img src="OffenderAttribute.jpg" alt=""></p>
<p>​    For every detected snatching incident, the distance was calculated between the home of the offender and the centroids of each of the 201 wards. Based on these distances, Fig. 1 shows the distribution of the home-crime distance, which reveals the typical positively skewed distance decay pattern.</p>
<p><img src="Distance.jpg" alt=""></p>
<h4 id="Crime-Generators-and-Attractors"><a href="#Crime-Generators-and-Attractors" class="headerlink" title="Crime Generators and Attractors"></a>Crime Generators and Attractors</h4><p>​    <em>textile stores</em> (including clothing and fabric shops)(纺织品商店)、<em>jewelry shops</em> (珠宝商店)、mosques(清真寺)、<em>temples</em>(寺庙)</p>
<p><img src="Generators.jpg" alt=""></p>
<p>​    Figure 3 presents a graphical overview of the Spearman correlation coefficients between the facility frequencies in wards. All correlations are positive, indicating that different types of facilities tend to agglomerate and lead to facility concentrations. Most correlations are medium-level, between 0.20 and 0.60. High correlations of ~ 0.85 exists between <strong>textile stores, personal care and other retail businesses</strong>.    </p>
<p><img src="Correlation.jpg" alt=""></p>
<h4 id="Methods-1"><a href="#Methods-1" class="headerlink" title="Methods"></a><em>Methods</em></h4><p>​    To quantify the spatial preferences of snatching offenders(为了量化抢劫犯的空间偏好) and test the hypotheses(假设), we used the <strong><em>discrete crime location choice method</em></strong>(离散选择模型) (<em>Bernasco and Nieuwbeerta 2005</em>). This method applies McFadden’s <strong><em>random utility maximization theory</em></strong>(效用最大化理论) (<em>McFadden 2001</em>) and econometric discrete choice models(计量离散选择模型) (<em>Ben-Akiva and Lerman 1985; Train 2009</em>) to the offender’s decision of where to commit crime. </p>
<p>​    This discrete crime location choice method is particularly appropriate for two reasons.  </p>
<ul>
<li>The  first  reason  is  the  intimate  link  it  provides  between  theory  and  statistical model.</li>
<li>The second reason is that the method uses a model of individual choice, in which it is possible to include idiosyncratic individual characteristics in the analysis.</li>
</ul>
<p>​    If the person committing snatching offense <em>n</em> decides to commit it in ward <em>i</em>, he or she must expect to derive more utility than any of the other 200 wards would provide:</p>
<script type="math/tex; mode=display">
U_{ni} > U_{nj}{\forall}j{\neq}i</script><script type="math/tex; mode=display">
U_{ni} = V_{ni} + \epsilon_{ni}</script><script type="math/tex; mode=display">
P_{ni} = Pr(U_{ni} > U_{nj}{\forall}j{\neq}i) = Pr(\epsilon_{ni}-\epsilon_{nj}<V_{ni}-V_{nj}{\forall}j{\neq}i)</script><p>​    If the unobserved random utility components random error component(随机误差分量) are independent(独立) and identically distributed according to an extreme value distribution(和极值分布相同),The conditional logit model  can be derived, in which</p>
<script type="math/tex; mode=display">
P_{ni}=\frac {e^{V_{ni}}∑^J_{j=1}} {e^{V_{nj}}}</script><h3 id="Results-1"><a href="#Results-1" class="headerlink" title="Results"></a>Results</h3><p>​    Table 3 presents the results of two conditional logit models.</p>
<p><img src="ModelResults.jpg" alt=""></p>
<ul>
<li><strong><em>Distance Hypothesis:</em></strong> The estimated odds ratio of the log-distance effect is 0.36 in Model 1 and 0.35 in Model 2. It indicates that if a ward is further away from the offender’s home, the odds of the offender selecting the ward for snatching decrease.</li>
<li><strong><em>Repeat Offending Hypothesis</em></strong>: The odds ratios of 12.72 in Model 1 and 10.72 in Model 2 are quite similar, and indicate a large and statistically significant effect: the odds of selecting a ward are ~ 12 times larger if the offender has previously committed a snatching offense in the ward than if the offender had not committed a previous snatching offense in the ward. </li>
<li><strong><em>Crime Generators and Attractors Hypothesis</em></strong>: Based on Table 3, the evidence for this hypothesis is mixed. Whereas we find that the estimated effects of some types of facilities are positive and statistically significant (<em>churches, educational institutions, marriage halls, personal care businesses, parks, restaurants and business offices</em>), the majority are not. </li>
</ul>
<h3 id="Discussion-and-Conclusion"><a href="#Discussion-and-Conclusion" class="headerlink" title="Discussion and Conclusion"></a>Discussion and Conclusion</h3><p>​    it is important not only to verify whether the established relationships also hold in other regions of the world, but also to make sure that key theoretical concepts are measured in a way that reflects relevant(相关的) local economic, social and cultural characteristics. Our analysis of snatching location choices in India, for example, emphasized the potential relevance of specific places (marriage halls(婚礼大厅) and places of worship(礼拜场所)) where many people wear valuable jewelry and clothing ornaments(装饰品) in outdoor settings.</p>
<h3 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h3><ol>
<li><p>Crime better be studied at more fine-grained resolutions, such as streets, street segments or parcels(研究尺度问题——大尺度在空间上具有异质性)</p>
</li>
<li><p>Although the coverage of facilities appears sufficient (fieldwork observations suggested a coverage of more than 95 percent of the facilities), the data do not allow facilities to be differentiated by size. Even facilities of the same type (e.g. hospital, church, or store) can vary widely in the number of visitors they attract, but this variation is not reflected in our facility frequencies.(POIs 的大小对人群的吸引作用存在差异，但由于数据问题无法对POI的大小进行区分)</p>
</li>
<li><p><strong>A final limitation, one that applies to all published crime location choice studies using the discrete spatial choice framework, is that our findings cannot identify the intentions that motivate offenders’ mobility.</strong> (无法确定促使犯罪者流动的动机). The crime location choice model cannot distinguish between the choice of <em>whether</em> to commit crime (given the location where the individual is) and the choice of <em>where</em> to commit crime (given sufficient motivation to commit it). This is an important distinction that hinges on the offender’s level of premeditation, i.e. on the extent to which the offense is planned in advance.</p>
</li>
</ol>
<h3 id="Inspires"><a href="#Inspires" class="headerlink" title="Inspires"></a>Inspires</h3><ol>
<li>The estimated coefficients of the discrete choice model are valid indicators of how land use categories affect the criminal attractiveness of potential target areas.</li>
<li>Many studies have demonstrated that <strong>crime frequencies vary by time of day, by day of week and by season</strong> (Andresen and Malleson<br>2013; Haberman and Ratcliffe 2015; Tompson and Bowers 2013) and <strong>some studies have examined whether location preferences also vary</strong> temporally (van Sleeuwen et al. 2018). </li>
<li>The present study investigated the effects of offenders’ home locations and of their prior offending locations. <strong>Future research could focus on effects of offenders’ work place, previous residences and other anchor points that are part of their awareness space and have a possible impact on their offending location choices.</strong>(考虑犯罪者的工作场所？之前的居住点？以及犯罪者意识空间中的其他地方)</li>
</ol>
]]></content>
      <categories>
        <category>Paper</category>
        <category>Mechanism research</category>
      </categories>
      <tags>
        <tag>Crime location choice</tag>
        <tag>Snatching</tag>
        <tag>Repeat offending</tag>
        <tag>Crime generators</tag>
        <tag>Crime pattern theory</tag>
        <tag>India</tag>
      </tags>
  </entry>
  <entry>
    <title>My first bolg</title>
    <url>/2021/10/25/My-first-bolg/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Hello! I am Xuewei Zhang.Well, you can also call me Nick. I create this website to record my study life.</p>
<span id="more"></span>
<h1 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h1><p> A postgraduate from Guangzhou University.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>MBTI 爆火背后的需求</title>
    <url>/2022/04/05/MBTI-%E7%88%86%E7%81%AB%E8%83%8C%E5%90%8E%E7%9A%84%E9%9C%80%E6%B1%82/</url>
    <content><![CDATA[<blockquote>
<p>来一次 MBTI 人格测试？MBTI 在这次愚人节竟然火上了热搜。但是细细想来，人们对“玄学”似乎总是抱着期待又敬畏的心态，有不少人还试图在诸如星座、塔罗预测结果中寻找信心支撑。而 MBTI 也成为了新的流量密码之一。</p>
</blockquote>
<span id="more"></span>
<h1 id="什么是-MBTI"><a href="#什么是-MBTI" class="headerlink" title="什么是 MBTI"></a>什么是 MBTI</h1><p><strong>MBTI</strong> 最早发表约于1944年，其理论基础来自瑞士心理学家 Carl Gustav Jung 的”人格类型“等观点。 <strong>MBTI</strong> 全称迈尔斯-布里奇斯性格分类指标（<strong>M</strong>yers-<strong>B</strong>riggs <strong>T</strong>ype <strong>I</strong>ndicator，简称 <strong>MBTI</strong>），是人格类型学中一种内省的自我报告问卷，表明人们在如何看待世界和做出决定方面存在不同的心理偏好。</p>
<p>该测试尝试为人格类型分配四个类别：内向（<strong>I</strong>ntroversion）或外向（<strong>E</strong>xtroversion）、实感（<strong>S</strong>ensing）或直觉（I<strong>n</strong>tuition）、思考（<strong>T</strong>hinking）或情感（<strong>F</strong>eeling）、判断（<strong>J</strong>udging）或感知（<strong>P</strong>erceiving），取各类别的首字母来组成测试结果类别之称，如”ENFP”。</p>
<p><img src="./四个维度.png" alt=""></p>
<p>尽管 <strong>MBTI</strong> 与一些心理学理论类似，但依然被众多学者认为是伪科学，并没有在有关学术研究领域获广泛承认。该测试被认为具有重大的心理统计学缺陷，主要包括：</p>
<ul>
<li>测验效度不理想（即没有测量到其想要测量的内容，没有预测能力或没有可以概括的项目）</li>
<li>可靠性差（同一个人在不同的场合容易给出不同的结果）</li>
<li>测量类别间不独立（一些已经被注意到的二分选项之间相关关联）</li>
<li>不够全面（缺乏 neuroticism ）</li>
</ul>
<p>虽然大多数人知道其不太科学，但不可否认的事实是其热度高涨不跌，这到底是出于怎样的需求，让沉寂近80年的 MBTI 重获新生？下面就让我们逐一分析。</p>
<h1 id="结果如你所愿"><a href="#结果如你所愿" class="headerlink" title="结果如你所愿"></a>结果如你所愿</h1><h2 id="需求一：自我确认"><a href="#需求一：自我确认" class="headerlink" title="需求一：自我确认"></a>需求一：自我确认</h2><p>人类喜欢反复确认自己，确认自己是谁，自己是什么样的，自己是什么性格。</p>
<ul>
<li>早上起来洗漱你会第一时间照照镜子，确认自己的五官相貌，就算在没有镜子的年代，人们也会通过水面面反射来了解自己的模样。</li>
<li>通过行为来确认自己是谁，朋克族穿上带铆钉的衣服，感性者热衷于言情剧。</li>
</ul>
<p>这种对自身的确认，帮助我们更好地认识自己且找到自己真是存在的感觉。</p>
<p>而 <strong>MBTI</strong> 为人们的自我确认提供了便捷的方式。</p>
<ul>
<li>我是 <strong>ESTP</strong> 类型的人格，所以我喜欢与人争论。</li>
<li>我是 <strong>ISTJ</strong> 类型的人格，所以我事情都安排得井井有条。</li>
</ul>
<p>人们不再需要借助工作、生活和社交等实践来确认自己，通过这些简单的测试就能解读并确认自己的性格。不仅如此，这些测试在满足我们自我确认需求的同时，往往还会给我们提供人格美化服务。</p>
<h2 id="需求二：自我美化"><a href="#需求二：自我美化" class="headerlink" title="需求二：自我美化"></a>需求二：自我美化</h2><h2 id="自我欣赏"><a href="#自我欣赏" class="headerlink" title="自我欣赏"></a>自我欣赏</h2><p>翻开各种对 <strong>MBTI</strong> 结果的解读，你很难从中找到大篇幅的负面描述。</p>
<p><img src="./ISFJ.png" alt=""></p>
<p>有瑕疵的地方，会用委婉的语言包装成瑕不掩瑜的感觉，而那些本是优点的方面，则会描述的更加丰满、散发光芒。</p>
<p>我们每个人都渴望得到赞美，渴望被认可。每个人心中的自己，也都拥有比现实更美好的形象。</p>
<p>因此，当赞美出现时，我们往往很难予以否认：</p>
<ul>
<li>我是一个做事严谨的人。</li>
<li>我虽然不经常表达自己的意见，但我的内心早已洞察一切。</li>
</ul>
<p>通过这些测试、解读，获得自信和能量。就像摄入糖分一般让自己感到愉悦。</p>
<p>更重要的是，阅读则在自我欣赏的之余，还可以把自己的测试结果晒到网上、发给朋友，可以无负担地赞美自己，并且让其他的人也来欣赏自己的优点。</p>
<h2 id="解释不合理信念"><a href="#解释不合理信念" class="headerlink" title="解释不合理信念"></a>解释不合理信念</h2><p>人是极不愿意承认自己有错的。</p>
<p>对绝大多数人而言，一旦犯了任何错误，第一反应都不是反思自己，而是寻找借口。</p>
<p>但往往，当借口不足以服众的时候，又会让自己陷入到很尴尬的境地。</p>
<p>而 MBTI 性格测试，则给了人们的行为风格，一个看似很合理的支撑。甚至让那些原本是缺点的问题，也变得很理直气壮。</p>
<ul>
<li>我就是ESFP的人，我本身就无法忍受那样无聊的事情。</li>
</ul>
<p>当自己的不合理信念找到解释后，就不会产生自我责怪的愧疚感，甚至还可以利用它来创造一定的社交优势：“我就是这样的人，你要与我做朋友，就应该包容我。”</p>
<h2 id="发掘自己的潜力"><a href="#发掘自己的潜力" class="headerlink" title="发掘自己的潜力"></a>发掘自己的潜力</h2><p>在优点被赞美、缺点被美化的同时，往往还能在解读中，找到一些并不完全属于自己的优点。</p>
<p>而这些优点，其实在每个人身上，又都能找到些许迹象。</p>
<p>比如，“好奇心、求知欲强烈”这样一个特征。其实我们每个人，都或多或少有自己好奇的事情。虽然过去并未发现自己是个好奇心强烈的人，但在阅读了人格解读，且从自己身上找到对应的事情后，就会越发认同，自己是这样，或是有这种潜质的</p>
<h2 id="需求三：社交"><a href="#需求三：社交" class="headerlink" title="需求三：社交"></a>需求三：社交</h2><p>在满足个人内心需求的同时，人格测试也是极佳的社交工具。</p>
<ol>
<li>它具有足够的趣味性，并能够从中衍生中众多话题，不限于情感、工作、生活方方面面。</li>
<li>它有广泛的受众，几乎每个人都对相关的话题，有一定了解，可以成为天气、饮食之外的又一共通语言。</li>
<li>它因为有趣味的包装，就降低了自身的目的性。无论是想告诉别人什么话，还是想与谁搭话，借此为开场白，都会显得不那么刻意。</li>
</ol>
<p>所以，在很多社交场合中，人格测试都大有用武之地。</p>
<ul>
<li>摸鱼神器，一测一聊一下午。</li>
<li>搭话神器，可以毫不刻意与一个人展开对话。</li>
<li>需求工具，委婉告诉别人，自己想要什么。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在上述介绍的需求下，MBTI 就这样出圈了，愚人节期间连续霸占热搜榜单第一（虽然在我写完这篇文章的时候热度已经降下去很多了），活跃在各大平台。在这样的热度洪流下，我们有必要由果寻因，发现自己内心深层的需求。</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】深度学习与神经网络</title>
    <url>/2021/10/27/Neural-Networks-and-Deep-Learning-Chapter-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Books</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Books</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】统计学习方法-李航</title>
    <url>/2021/11/02/Statical-Learning-with-R-Chapter2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Books</category>
        <category>Statical</category>
      </categories>
      <tags>
        <tag>Books</tag>
        <tag>Statical</tag>
      </tags>
  </entry>
  <entry>
    <title>【笔记】Statistical Learning with R</title>
    <url>/2021/11/02/Statistical-Learning-with-R/</url>
    <content><![CDATA[<p> 统计学习系列——引言</p>
<p>什么是统计学习？统计学习是指大量用于理解数据的工具。同时这些工具可分为有监督和无监督的。</p>
<p>广义来说(Broadly speaking)，有监督的统计学习包括构建一个用于预测、估计或基于一个或多个输入的输出的统计模型。</p>
<p>在无监督学习中，则只有输入而无有监督的输出；因此我们可以从这类数据中学习它们之间的关系和结构。</p>
<span id="more"></span>
<h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><hr>
<p>本书提供三个数据集用于举例说明统计学习的应用：工资数据集、股票市场数据集和基因表达数据集。</p>
<h4 id="工资数据集"><a href="#工资数据集" class="headerlink" title="工资数据集"></a>工资数据集</h4><hr>
<p>数据集主要内容是与美国大西洋地区男性工资相关的因素，通过此数据理解员工的年龄、教育程度和年份与工资之间的关系。因为该数据涉及到预测连续或定量的输出值，所以这通常被称为回归问题。</p>
<p><img src="wage.jpg" alt=""></p>
<h4 id="股票市场数据"><a href="#股票市场数据" class="headerlink" title="股票市场数据"></a>股票市场数据</h4><hr>
<p>但在具体的案例中我们也许会预测非数值的结果-比如分类或者定性(categorical or qualitative)的结果。该数据集包含2001年至2005年5年间标准普尔指数(S&amp;P 500)的每日走势。目标是利用过去五天指数的百分比变化来预测该指数在某一天是上升还是下降。这里的统计学习问题涉及到预测某天的股市表现是会进入上升区间还是下降区间-即所谓的分类问题。</p>
<p><img src="stockmarket.jpg" alt=""></p>
<h4 id="基因表达数据"><a href="#基因表达数据" class="headerlink" title="基因表达数据"></a>基因表达数据</h4><hr>
<p>前面两个例子表示了具有输入变量和输出变量的数据集，然而另一类重要的问题设计我们只观察输入变量而没有相应输入的情况。例如，在营销设置中，我们可能有许多当前客户或者潜在客户的人口统计信息，我们可能希望通过提取观测到的特征对个体进行分组，以此来了解那些类型的客户彼此相似。这就是所谓的聚类问题。针对该问题本文所使用的数据集为NCI60数据集，其内容包含64个癌症细胞系中每个细胞系的6,830个基因表达测量值。研究目的是根据他们的基因表达测量值来确定细胞系中是否有组成簇。</p>
<p><img src="gene.jpg" alt=""></p>
<p><strong><em>PS：分类和聚类的比较</em></strong></p>
<ul>
<li><em>聚类分析研究如何在没有训练条件的情况下将样本分为若干类</em></li>
<li><em>分类中，对于目标数据库存在哪些类是存在的，要做的是把每一条记录分别属于哪一类标记出来。</em></li>
</ul>
<h3 id="本书的结构"><a href="#本书的结构" class="headerlink" title="本书的结构"></a>本书的结构</h3><hr>
<p>首先，第二章介绍了统计学习中的基本术语和概念，还展示了K临近分类-一种非常简单但在很多问题上表现都很好的方法。</p>
<p>接着，第三章和第四章涵盖了回归和分类的经典线性方法，其中第三章回顾了线性回归，这是所有回归方法的基础。第四章我们讨论了两种最重要的经典分类方法，<strong>逻辑回归分析</strong>(<em>logistic regression</em>)和<strong>线性判别分析</strong>(<em>linear discriminant analysis</em>)。</p>
<p>所有统计学习背景下最关键的问题是，如何根据应用问题选择最优的方法。因此第五章介绍了<strong>交叉验证</strong>(<em>cross-validation</em>)和<strong><em>Bootstrap</em></strong>，用来评估几种不同方法的精确性，并以此选择最好的一种。</p>
<p>在第六章中介绍更多的线性方法，包括<strong>逐步回归</strong>(<em>stepwise selection</em>)、<strong>岭回归</strong>(<em>ridge regression</em>)、<strong>主成分回归</strong>(<em>principal components regression</em>)、<strong>偏最小二乘法</strong>(<em>partial least squares</em>)和 <strong><em>Lasso</em>回归</strong>(<em>the lasso</em>)。</p>
<p>紧接着，第七章介绍非线性统计学习，首先介绍一系列在单个输入变量问题上表现很好的非线性方法，接着介绍可用于拟合多个输入的<strong>非线性加法模型(<em>non-<em>*</em></em></strong>linear additive models<em>)*</em>。</p>
<p>第八章中介绍基于树的方法，其中包括<strong>套袋法</strong>(<em>bagging</em>)、<strong>提升法</strong>(<em>boosting</em>)和<strong>随机森林</strong>(<em>random forests</em>)。</p>
<p>第九章介绍一组执行线性和非线性分类的方法—<strong>支持向量机</strong>(<em>Support vector machines</em>)。</p>
<p>第十章介绍有关<strong>深度学习</strong>(<em>deep learning</em>)的方法。</p>
<p>第十一章探讨了<strong>生存分析</strong>(<em>survival analysis</em>)，一种回归方法，专门用于输出变量未完全观察的回归问题。</p>
<p>第十二章考虑的问题类型是只有输入变量而没有输出变量的设置，具体的方法有<strong>主成分分析</strong>(<em>principal components analysis</em>)、<strong>K均值聚类</strong>(<em>K-means clustering</em>)、<strong>层次聚类</strong>(<em>hierarchical clustering</em>)。</p>
]]></content>
      <categories>
        <category>Books</category>
        <category>Statical</category>
      </categories>
      <tags>
        <tag>Books</tag>
        <tag>Statical</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>css 样式书写规范</title>
    <url>/2022/02/13/css-%E6%A0%B7%E5%BC%8F%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>CSS 样式书写规范记录</p>
<span id="more"></span>
<h1 id="命名规范说明"><a href="#命名规范说明" class="headerlink" title="命名规范说明"></a>命名规范说明</h1><h1 id="样式属性顺序"><a href="#样式属性顺序" class="headerlink" title="样式属性顺序"></a>样式属性顺序</h1><h1 id="样式书写规范"><a href="#样式书写规范" class="headerlink" title="样式书写规范"></a>样式书写规范</h1><h1 id="HTML-5语义化"><a href="#HTML-5语义化" class="headerlink" title="HTML 5语义化"></a>HTML 5语义化</h1>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是 NFT ？音乐股票又是啥？</title>
    <url>/2022/01/29/%E4%BB%80%E4%B9%88%E6%98%AF-NFT-%EF%BC%9F/</url>
    <content><![CDATA[<p>2022-1-29 学习随笔</p>
<blockquote>
<p>什么是 NFT ？ 音乐股票又是啥 ？</p>
</blockquote>
<span id="more"></span>
<h1 id="什么是-NFT"><a href="#什么是-NFT" class="headerlink" title="什么是 NFT"></a>什么是 NFT</h1><p>NFT(Non-Fungible Token)，中文名称为【非同质化货币】。它具有不可分割、不可替代、独一无二等特性，是一种建立在区块链技术上的特殊形式的加密货币。</p>
<p>加密货币分为两大类，原生币（如比特币、以太坊等）和代币。原生币在自己的主链上进行记账操作，而代币则是依附于现有的区块链，利用【智能合约】进行记账动作。</p>
<p>代币分为同质化和非同质化，同质化货币可以【互相替换】，比如比特币，它们的价值是一样的。反之，非同质化货币是独一无二且不可替换，世界上没有两个一模一样、价值相等的 NFT。因此 NFT间无法交换。</p>
<p>NFT 的价值來自于「认证」以及「稀缺性」，加上艺术品的价值非常主观，沒有特定的标准衡量其价值。收藏者或许会因为情怀或喜好，愿意用高价买下这件艺术品。</p>
<p>艺术家可以通过 NFT 技术，在艺术品永远记录自己的姓名，证明自己是此艺术品的创作人，享有该作品的唯一版权。</p>
<h1 id="音乐股票—-一种新的音乐版权运营模式"><a href="#音乐股票—-一种新的音乐版权运营模式" class="headerlink" title="音乐股票— 一种新的音乐版权运营模式"></a>音乐股票— 一种新的音乐版权运营模式</h1><p>去年12月，音乐和金融科技初创公司 Djooky 推出了一个名为 DjookyX 的全新平台，以供乐迷用户投资喜欢歌手的音乐版权。不同于当下主流的音乐版权交易模式，DjookyX 一经发布便吸引了业内关注，并于今年1月中旬完成了其首笔拍卖。</p>
<p>参与首笔交易的音乐人是来自德国的22岁流行和电子音乐人 Dominik Jesz 。他通过向歌迷出售其曲目《Let Me Know》的20%的词曲版权，仅在29位用户的支持下就成功筹集到了12400 欧元（约合88323人民币）。</p>
<p>在这一模式下，DjookyX为歌手、词曲作者和其他版权所有者提供了一个新的可能，即通过向粉丝社区提供一小部分版税，且创作者不会失去对其版权的任何控制，就能筹集加速他们的音乐事业所需的资金。</p>
<p>具体操作上，在音乐人（唱片公司）将曲目提交给平台后，可以向粉丝出售至多49.9%的权益比例，以保证音乐人对于版权的控制权；同时，音乐人需要设置每百分比权利的最低价格，以及决定拍卖的开始日期和时间，最终签订初始出售和转让权利的协议，其中创作者还被要求要填写一份表格来说明资金用途，以防止欺诈或犯罪活动。<strong>（去中心化，扩大音乐人的融资通道，没有中间商赚差价，能够获得更合理的收入）</strong></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端跨域知识总结</title>
    <url>/2022/04/22/%E5%89%8D%E7%AB%AF%20HTTP%20%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>跨域是一个令人头疼的事情，也在跨域的过程中学到了不少知识，就在这里边学边总结吧。</p>
<p>基础不牢，地动山摇！</p>
</blockquote>
<p>前端跨域知识点总结笔记。</p>
<span id="more"></span>
<h1 id="HTTP-基本概念"><a href="#HTTP-基本概念" class="headerlink" title="HTTP 基本概念"></a>HTTP 基本概念</h1><h2 id="什么是-HTTP-？"><a href="#什么是-HTTP-？" class="headerlink" title="什么是 HTTP ？"></a>什么是 HTTP ？</h2><p>HTTP 全称（HyperText Transfer Protocol）— 超文本传输协议。</p>
<h2 id="详细描述【超文本传输协议】"><a href="#详细描述【超文本传输协议】" class="headerlink" title="详细描述【超文本传输协议】"></a>详细描述【超文本传输协议】</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><h4 id="什么是协议？"><a href="#什么是协议？" class="headerlink" title="什么是协议？"></a>什么是协议？</h4><p>【协】是指有两个级以上的的参与者。</p>
<p>【议】是指对参与者的一种行为约定和规范。</p>
<h4 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><p>HTTP 是一个用在计算机世界里的协议，它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理（行为约定和规范）。</p>
<h3 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h3><p>传输，顾名思义是指把东西从一个位置运输到另外一个位置。</p>
<p>HTTP 协议是一个双向协议，我们在网络世界冲浪的时候，浏览器是请求方 A，浏览的网站是应答方 B。双方约定使用 HTTP 协议进行通信，于是浏览器将请求数据发送给网站，网站再把返回浏览器请求的数据，最后由浏览器渲染展示在屏幕，就能看到图片、视频等信息。</p>
<p>需要注意的是，虽然数据在 A 和 B 之间进行传输，但中间过程允许有中转或者接力，只要中间人同样遵从 HTTP 协议，不打扰基本的数据传输，就可以添加额外的东西。 </p>
<p>针对传输，我们可以进一步说 HTTP 是一个在计算机世界里专门用来在两点之间传输数据的约定和规范。</p>
<h3 id="超文本"><a href="#超文本" class="headerlink" title="超文本"></a>超文本</h3><p>前面提到 HTTP 是专门用来在两点之间传输数据的约定和规范，而两点间的数据传输的数据内容是<strong>超文本</strong>。</p>
<p>超文本是超越了普通文本的文本，它是文字、图片、视频等混合体。最关键的部分是超链接，能让你从一个超文本跳转到另外一个超文本。</p>
<p>HTML 是最常见的超文本，其本身只是文本文件，但其内部拥有大量标签用来定义图片、视频等链接，经过浏览器的渲染，呈现出网页。</p>
<p><strong>综上所述， HTTP 是一个在计算机世界专门在【两点】之间【传输】文字、图片、音频、视频等【超文本】数据的【约定和规范】。</strong></p>
<h2 id="HTTP-常见的状态码"><a href="#HTTP-常见的状态码" class="headerlink" title="HTTP 常见的状态码"></a>HTTP 常见的状态码</h2><p><strong>1xx：</strong></p>
<ul>
<li>1xx 状态码属于提示信息，是协议处理中的一种中间状态，实际用的比较少。</li>
</ul>
<p><strong>2xx：</strong>    </p>
<ul>
<li>2xx 类状态码表示服务器成功处理了客户端的请求，也是我最想看到的状态😭。</li>
<li>【200 OK】是最常见的成功状态码，表示一切正常🆗</li>
<li>【204 No Content】也是常见的成功状态码，与 200 OK 基本相同</li>
<li>【206 Partial Content】是应用于 HTTP 分块下载或断电续传，表示相应返回的 body 数据并非资源的全部，而是其中一部分。</li>
</ul>
<p><strong>3xx：</strong></p>
<ul>
<li>3xx 类状态吧表示客户端请求的资源发生了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向。</li>
<li>【301 Moved Permanently】表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。</li>
<li>【302 Moved Permanently】表示临时重定向，说明请求的资源还在，但需要用另外一个 URL 来访问。</li>
<li>301 和 302 都会在响应头里使用字段 Location，指明后续要跳转的 URL ，浏览器会自动重定向新的 URL。</li>
<li>【304 Not Modified】不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制</li>
</ul>
<p><strong>4xx：</strong></p>
<ul>
<li>4xx 来状态码表示客户端发送的报文有误，服务端无法处理，也就是错误码。（看到4开头血压就开始上来了😡）</li>
<li>【400 Bad Request】表示客户端请求的报文有错误，但只是个笼统的错误。</li>
<li>【403 Forbidden】表示服务器禁止访问资源，但不是客户端的请求出错。</li>
<li>【404 Not Found】表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</li>
</ul>
<p><strong>5xx：</strong></p>
<ul>
<li>5xx 类状态码表示客户端请求报文正确，但是服务器处理内部时发生了错误，属于服务器端错误码。</li>
<li>【500 Internal Server Error】与 400 类型相似，是个笼统通用的错误码，但服务器发生了什么错误我们并不知道，</li>
<li>【501 Not Implemented】 表示客户端请求的功能还不支持。</li>
<li>【502 Bad Gateway】通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。</li>
<li>【503 Service Unavailable】表示服务器当前很忙，暂时无法相应服务器，类似“网络服务正忙，请稍后重试”。</li>
</ul>
<h2 id="HTTP-常见的字段"><a href="#HTTP-常见的字段" class="headerlink" title="HTTP 常见的字段"></a>HTTP 常见的字段</h2><h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><p>客户端发送请求时，用来服务器的域名。</p>
<p><img src="./host.jpg" alt=""></p>
<p>Host：<a href="http://www.A.com">http://www.A.com</a></p>
<p>有了 host 字段，就可以将请求发往【同一台】服务器上的不同网站。</p>
<h3 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h3><p>服务器在返回数据时，会有 Content-Length 字段，表明本次回应的数据长度。</p>
<h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>Connection 字段最常用于客户端要求服务器使用 TCP 持久连接，以便其他请求复用。</p>
<p><img src="./connection.jpg" alt=""></p>
<h3 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h3><p>Content-Type 字段用于服务器回应时，告诉客户端，本次数据是什么格式。</p>
<p><img src="./type.jpg" alt=""></p>
<p>Content-type: text/html; charset=utf-8</p>
<p>上面的类型表明，发送的是网页，并且编码格式是 UTF-8。</p>
<p>客户端请求的时候，可以使用 Accept 字段声明自己可以接受哪些数据格式。</p>
<p>Accept: */*.</p>
<h3 id="Content-Encoding"><a href="#Content-Encoding" class="headerlink" title="Content-Encoding"></a>Content-Encoding</h3><p>Content-Encoding 字段说明了数据的压缩方法，表示服务器返回的数据使用了什么压缩格式。</p>
<h1 id="GET-和-POST"><a href="#GET-和-POST" class="headerlink" title="GET 和 POST"></a>GET 和 POST</h1><h2 id="GET-和-POST-的区别"><a href="#GET-和-POST-的区别" class="headerlink" title="GET 和 POST 的区别"></a>GET 和 POST 的区别</h2><p>Get 方法的含义是请求从服务器获取资源，这个资源可以是静态的文本、页面、图片视频等。</p>
<p><img src="./get.jpg" alt=""></p>
<h2 id="GET-和-POST-都是安全和幂等的吗？"><a href="#GET-和-POST-都是安全和幂等的吗？" class="headerlink" title="GET 和 POST 都是安全和幂等的吗？"></a>GET 和 POST 都是安全和幂等的吗？</h2><h1 id="HTTP-特性"><a href="#HTTP-特性" class="headerlink" title="HTTP 特性"></a>HTTP 特性</h1><h1 id="HTTP-和-HTTPS"><a href="#HTTP-和-HTTPS" class="headerlink" title="HTTP 和 HTTPS"></a>HTTP 和 HTTPS</h1>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工程师进阶笔记</title>
    <url>/2022/04/14/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>最好的JS代码就是没有JS代码</p>
</blockquote>
<p>前端工程师进阶笔记</p>
<span id="more"></span>
<h1 id="Day-One"><a href="#Day-One" class="headerlink" title="Day One"></a>Day One</h1><p>WEB 开发中</p>
<ul>
<li>HTML 负责网页结构</li>
<li>CSS 负责网页元素的样式</li>
<li>JS 负责网页与用户的交互</li>
</ul>
<p>要成为优秀的前端工程师，需要遵守这三者各司其职的原则，让代码易于维护和拓展。</p>
<h2 id="切换状态"><a href="#切换状态" class="headerlink" title="切换状态"></a>切换状态</h2><p>现在我们有一个任务，它的具体需求是这样的：给一个网页实现一个深色系和浅色系主题的切换，以使得在夜晚访问这个网页的读者能够使用“夜间模式”。</p>
<p>这个网页的HTML大概是这样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTTP 和 HTTPS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.pic</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-id">#modeBtn</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;modeBtn&quot;</span>&gt;</span>🌞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTTP 和 HTTPS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    http: 是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的超文本传输协议。 https:是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。其作用是：建立一个信息安全通道，来确保数据的传输，确保网站的真实性</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一般而言，我们直观的想法是通过点击事件来替换HTML的背景颜色和按钮图标。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;modeBtn&#x27;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> body = <span class="built_in">document</span>.body;</span><br><span class="line">  <span class="keyword">if</span>(e.target.innerHTML === <span class="string">&#x27;🌞&#x27;</span>) &#123;</span><br><span class="line">    body.style.backgroundColor = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">    body.style.color = <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line">    e.target.innerHTML = <span class="string">&#x27;🌜&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    body.style.backgroundColor = <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line">    body.style.color = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">    e.target.innerHTML = <span class="string">&#x27;🌞&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这段代码给按钮注册了click事件，当用户点击按钮时，如果当前按钮文字为🌞，说明是要从日间模式换成夜间模式，将body背景颜色换为深色，文字样式换为浅色。</p>
<p>但上述代码有几个问题：</p>
<ol>
<li>其他不了解需求的人，阅读这段代码能否直接理解这个按钮按下的含义？</li>
<li>产品需求发生更改，如要求用其他颜色背景显示夜间模式，JS 代码是否可以避免修改？</li>
<li>如果要给切换过程增加动画效果，是否方便添加？</li>
</ol>
<h2 id="用-class-表示元素的业务状态"><a href="#用-class-表示元素的业务状态" class="headerlink" title="用 class 表示元素的业务状态"></a>用 class 表示元素的业务状态</h2><p>故事一中通过 JS 代码来操作元素，缺点显而易见：其他阅读代码的人很难通过代码理解样式代表的业务需求或者状态。</p>
<p>出现这种情况的主要原因是，我们将<strong>本该由 CSS 完成的任务交给了 JS 来做</strong> ，原本应该由 CSS 设置元素的样式， 却让 JS 替代了。因此，需要对代码进行重构，体现其业务的需求。</p>
<ol>
<li>将夜间模式下的元素样式交还给 CSS；</li>
<li>重构 JS 代码。</li>
</ol>
<p>CSS: </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.night</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: black;</span><br><span class="line">            <span class="attribute">color</span>: white;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>JS:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;modeBtn&#x27;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> body = <span class="built_in">document</span>.body;</span><br><span class="line">  <span class="keyword">if</span>(body.className !== <span class="string">&#x27;night&#x27;</span>) &#123;</span><br><span class="line">    body.className = <span class="string">&#x27;night&#x27;</span>;</span><br><span class="line">    e.target.innerHTML = <span class="string">&#x27;🌜&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    body.className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    e.target.innerHTML = <span class="string">&#x27;🌞&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上述代码通过点击事件切换元素状态来实现白天模式和夜间模式的切换，虽然代码改动非常小，只是把之前的两行代码替换为一行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">body.style.backgroundColor = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">body.style.color = <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line"></span><br><span class="line">body.className = <span class="string">&#x27;night&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>但是它却解决了我们前面提到的三点问题：</p>
<ol>
<li>首先 classname 设为 night，这个操作本身可以透露一些需求信息，便于维护者快速理解业务需求。</li>
<li>其次，若产品需求更改，需要替换切换的颜色，则不需要改动 JS 代码，只需要修改 <code>body.night</code> 的样式即可！</li>
<li>最后，要给切换过程增加动画效果，可以使用 CSS3 支持的过渡动画，如：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.night</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后还可以通过添加为元素将<code>e.target.innerHTML = &#39;🌜&#39;;</code> 这样的切换给放到 CSS 中：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#modeBtn</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;🌞&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.night</span> <span class="selector-id">#modeBtn</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;🌜&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>去掉 HTML 中 <code>&lt;button id=&#39;modeBtn&#39;&gt;&lt;/button&gt;</code> 中间的文本内容，将 JS 代码简化成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;modeBtn&#x27;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> body = <span class="built_in">document</span>.body;</span><br><span class="line">  <span class="keyword">if</span>(body.className !== <span class="string">&#x27;night&#x27;</span>) &#123;</span><br><span class="line">    body.className = <span class="string">&#x27;night&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    body.className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>元素的 class 属性不仅为了给 CSS 提供元素选择器，至此，我们实现了 JS 只负责切换元素状态，而将元素样式的改变重新交还给 CSS ，保证了各司其职的原则，是我们代码即能体现业务的需求也有利于将来的维护和拓展。</p>
<h2 id="最好的-JS-代码是没有-JS-代码"><a href="#最好的-JS-代码是没有-JS-代码" class="headerlink" title="最好的 JS 代码是没有 JS 代码"></a>最好的 JS 代码是没有 JS 代码</h2><p>那么是否存在一种方式，我们只使用 CSS 实现“夜间模式”效果，对于切换夜间模式的需求而言，其核心问题是使用 <strong>CSS 代替 JS 来切换并记住与用户交互的状态</strong> 。 </p>
<p>HTML 中，能完成状态切换的元素第一时间可以想到的是表单中的 <strong>选择框（checkbox）</strong> ，对 HTML 进行修改：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;modeCheckBtn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;modeBtn&quot;</span> <span class="attr">for</span>=<span class="string">&quot;modeCheckBtn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTTP 和 HTTPS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    http: 是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的超文本传输协议。 https:是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。其作用是：建立一个信息安全通道，来确保数据的传输，确保网站的真实性</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们在上述代码中添加了一个 <code>type = &quot;checkbox&quot;</code> 的 input 元素，通过伪类选择器可以标记元素的被选中状态。</p>
<p>由于 <code>&lt;input&gt;</code> 元素是 body 的第一个子元素，它后面的子元素可以通过 CSS 的兄弟节点选择器来选中。</p>
<p>调整上一版本的样式，将 body 的样式移动到 <code>.content</code> 容器中，将 <code>body.night</code> 的样式一移动到 <code>#modeCheckBtn:checked + .content</code> 规则中。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#modeBtn</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#modeCheckBtn</span><span class="selector-pseudo">:checked</span>+<span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#modeBtn</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;🌞&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#modeCheckBtn</span><span class="selector-pseudo">:checked</span>+<span class="selector-class">.content</span> <span class="selector-id">#modeBtn</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;🌜&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#modeCheckBtn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样便可以实现点击 checkbox 进行 “夜间模式” 的切换，但不可能让用户通过点击选择框来进行切换，因此我们可以使用 label 元素替代 checkbox 触发用户的点击行为。</p>
<p>通过 label 元素的 for 属性制定的 id, 能够将 label 元素与对应的表单元素进行绑定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;modeBtn&quot;</span> <span class="attr">for</span>=<span class="string">&quot;modeCheckBtn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTTP 和 HTTPS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后将 选择框 checkbox 隐藏起来：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#modeCheckBtn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTTP 和 HTTPS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span><span class="selector-class">.night</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-id">#modeBtn</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-id">#modeCheckBtn</span><span class="selector-pseudo">:checked</span>+<span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-id">#modeBtn</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;🌞&#x27;</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-id">#modeCheckBtn</span><span class="selector-pseudo">:checked</span>+<span class="selector-class">.content</span> <span class="selector-id">#modeBtn</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;🌜&#x27;</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-id">#modeCheckBtn</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;modeCheckBtn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;modeBtn&quot;</span> <span class="attr">for</span>=<span class="string">&quot;modeCheckBtn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTTP 和 HTTPS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    http: 是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的超文本传输协议。 https:是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。其作用是：建立一个信息安全通道，来确保数据的传输，确保网站的真实性</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>再简单的代码，都有可能出 bug，唯一能够避免 bug 的办法便是不要代码，因此，<strong>最好的 JS 代码就是没有 JS 代码</strong>。</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 HTTP 知识总结</title>
    <url>/2022/04/22/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>基础不牢，地动山摇</p>
</blockquote>
<p>前端HTTP知识点总结笔记。</p>
<span id="more"></span>
<h1 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h1><p>提到跨域，首先需要明确浏览器的同源安全策略。</p>
<p>同源：协议(http 或 https)、域名(www.nickzxw.top)和端口号(80、8080)都相同则称之为同源，与之不同的皆是不同源，也就是跨域。</p>
<p><strong>跨域解决方法：</strong></p>
<p>一般有以下几种方法</p>
<ul>
<li>jsonp 方法，只适用于 GET 请求</li>
<li>CROS（跨域资源共享协议），适用于各种请求</li>
<li>domain 设置，只适用于子域名</li>
<li>POST Message，适用于父子网页 iframe 通信</li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>我平凡且又不平凡的2021</title>
    <url>/2021/12/30/%E6%88%91%E5%B9%B3%E5%87%A1%E4%B8%94%E5%8F%88%E4%B8%8D%E5%B9%B3%E5%87%A1%E7%9A%842021/</url>
    <content><![CDATA[<p>@<a href="回顾我平凡且不平凡的 2021">TOC</a></p>
<h1 id="回顾-2021"><a href="#回顾-2021" class="headerlink" title="回顾 2021"></a>回顾 2021</h1><p>转眼间，2021年马上就要过去了，时间过得太快了！<br>今年是正式成为一名研究生的一年，考研复习的时光依然历历在目。过去的一年里经历过低谷，也踏上过高峰，但更多的是对于自己未来的思考。这一年是平凡的一年，这一年也是不平凡的一年…</p>
<h2 id="决定考研的那天"><a href="#决定考研的那天" class="headerlink" title="决定考研的那天"></a>决定考研的那天</h2><p>说实话我在决定要考研的那一周前，从来没有想过有一天我会真的走上考研这条路，实际上我大一到大三有很多人问过我要不要考研，我每一次都回答得十分果断：不要！但突如其来的疫情改变了我很多行为和想法：大三上网课的那段时间我几乎已经停止了自己的学习，每天沉迷网游，不求上进，这样的情况持续了两个月之后我开始对自己的未来展开了思考。我以后想做什么？我这样子不求上进真的是我想要的吗？我想成为怎样的人？这些问题我想了一遍又一遍，多半都没有一个好的答案，但我爸以及他的一个好朋友那段时间一直用以一种很温和的方式向我提议考研，其实前几次我一直都是持拒绝和甚至有点抵触的态度，但那一天我犹豫了，也正是那一刻的犹豫，我正式决定要考研。那一天我爸很高兴地把这消息告诉了我妈，我看到他们开心，于是自己内心也变得更有动力，然后便是快速进入考研复习状态。现在回过头来看，其实人一旦有了动力，很多问题也就变的不是问题了。<br><img src="https://img-blog.csdnimg.cn/51663ae4f7554c6aa0f16112017d5a0e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljY2U=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="考完研的那天"><a href="#考完研的那天" class="headerlink" title="考完研的那天"></a>考完研的那天</h2><p>还记得2020年12月27日考研最后一门结束我走出考场的时候，心里并没有像自己原先设想的那样很激动，实际上那种感觉更像是在做梦。一个不太恰当的例子是你手里提着很重的箱子，你一个人走了很远很远，甚至习惯了箱子的存在，这时让你松手，心里会有一种难以言喻的空洞感。坐上回学校的的士，发了两条朋友圈，算是跟考研复习生活的正式告别。<br><img src="https://img-blog.csdnimg.cn/432187b4f2ce4fd1b623ed1acf50e36c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljY2U=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h2 id="出考研成绩的那天"><a href="#出考研成绩的那天" class="headerlink" title="出考研成绩的那天"></a>出考研成绩的那天</h2><p>我还记得那一天，我和几个同学约好出来一起吃饭，出来一起等成绩。那是特殊的一天，因为早上出四六级成绩，下午出考研成绩。早上我查到我六级过了，快乐并没有持续很久，因为我知道下午的成绩才是真正的重头戏，那是对我那些个奋斗的日日夜夜最好的体现。那天下午我在家磨了很久，出门前一刻被我查到了成绩，成绩有些差强人意，怀着对未来的不安和忐忑的心情我去和同学们吃了那顿饭。印象中那一天我们都很开心，只是每个人的未来都充满了不确定性…<br><img src="https://img-blog.csdnimg.cn/4680d585ea4a451081684091fac56f4f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljY2U=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h2 id="出国家线的那天"><a href="#出国家线的那天" class="headerlink" title="出国家线的那天"></a>出国家线的那天</h2><p>出国家线的那天其实我内心并没有很多波动，因为我知道自己一定会过国家线，主要的问题在于我觉得自己过所选专业的校线的可能性偏低，但是学校又迟迟没有公布专业线，所以那段时间我一直很emo，干啥都没有动力，也没有心思准备复试。后面专业线出来的时候我整个人都要裂开了，专业线没过，这意味着我将要和一众落榜的考生争夺各个学校数量稀少的调剂名额。调剂的那段时间，是2021年一整年，我最阴暗的时刻…<br><img src="https://img-blog.csdnimg.cn/f485e669143644e28c1d7a9181c9ae42.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljY2U=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="被录取的那一天"><a href="#被录取的那一天" class="headerlink" title="被录取的那一天"></a>被录取的那一天</h2><p>调剂正式开始的时间我记得尤为清楚，是3月22号，整个调剂过程持续一个多月，4月30号是所有学校考研招生结束的时间。什么？你问我为什么记得这么清楚，那是因为我调剂足足调了一个月！一部分原因是自己准备不足以及分数不高，另一部分是因为那年调剂系统还有很多不完善和不合理的地方。很多分数高的学生占了很多学校的调剂名额，参加了复试，到后面却又拒绝了学校的录取offer。我们那时候称这样的学生为“海王”，当然这种行为我个人认为完全可以理解，有选择权的情况下大家肯定都想去更好的学校，但也因此，我经历了人生至暗的一个月。每天起床的第一件事就是看哪间学校新发布了调剂公告，基本上每两个小时看一次，看到合适的马上就申请，甚至在各种大大小小的论坛上面找其他学校的老师发布的信息，给各个老师发了一封又一封的邮件，其中大多石沉大海；并且随着调剂的日子一天天的过去，身边的同学一个接着一个上岸，我心中的焦虑更是与日倍增。不仅如此，有一段时间，我的父母都已经开始放弃了，他们对我说：要是实在调剂不了就找工作吧，现在每天这样也不是办法。有很多次我真的要放弃了，但是我每一次都反问自己一句：你真的甘心吗？再坚持几天吧，说不定呢？找工作早几天晚几天也差不太多。所以我给自己设下DDL：如果在4月25号我还没调剂成功，那我放弃然后去找工作吧。如今我要感谢那时候坚定的我，功夫不负有心人，我在4月19号下午接到了一个电话，那位老师说之前见我申请过他们专业的调剂名额问我有没有时间参加复试，我当时回想了一下那是一个与我专业契合的方向并且是我一志愿报考的学校，我二话不说就同意了。第二天复试的时候老师也十分贴心，找了我专业相关的老师来对我进行复试，复试过程十分顺利，我自我感觉也非常不错。果不其然，几个小时后我就收到了录取通知，那一刻我热泪盈眶，看到录取通知的那一刻我才感觉到，所有的努力都是为了此刻，这一刻就是我的专属时刻！在这里我不得不感谢我的父母、我的辅导员涛哥以及我的舍友们，没有他们对我的鼓励和帮助，我今天不可能成为一名研究生，由衷的感谢他们！<br><img src="https://img-blog.csdnimg.cn/db685116d8434d8e9f5df5199c707fc5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljY2U=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="写博客的初衷"><a href="#写博客的初衷" class="headerlink" title="写博客的初衷"></a>写博客的初衷</h2><p>写博客的初衷是假期我在家的时候经常会遇到很多大大小小的问题，但是我发现别人写的博客不一定靠谱，很多时候你遇到的问题是别人没有遇到过的，因此那时候我萌生了一个想法：就是将我自己解决问题的过程仔细记录下来，说不定有些同学会遇到和我一样的问题呢？于是慢慢地我就开始了自己的博客之路，在解决问题同时我还想要提高自己的能力，所以便有了 LeetCode 系列的文章，其实主要还是为了记录自己的刷题过程（PS：监督自己刷题）以及一些自己对题目浅显的理解。恰好看到了 CSDN 年度回忆录，于是便萌生了写下这一篇年终总结的想法，希望自己继续坚持写作，坚持学习！<br><img src="https://img-blog.csdnimg.cn/867809e5fb1c45eab1345bce974b9061.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljY2U=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3064ce7d24bd48eda8f41855af7918b4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljY2U=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h1 id="如今"><a href="#如今" class="headerlink" title="如今"></a>如今</h1><p>如今，我遇到了一位很好的人生导师，也收获了一群很好的师兄师姐和研一小伙伴。研究生生活确实忙碌而辛苦，但有他们的陪伴，学习之余又充满了许多的欢声笑语，枯燥的学习因为他们的存在而变得富有乐趣。我相信我三年的研究生生活一定会因为他们以及我的努力奋斗，成为我人生中最难忘的一段记忆！希望在新的一年里，大家都身体健康、工作顺利、爱情事业两丰收！感谢平凡又不平凡的 2021 ！</p>
<p><img src="https://img-blog.csdnimg.cn/9707be1d7bef43cab71f37eff3e8a78a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmljY2U=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>疫情封控下的温暖</title>
    <url>/2022/11/11/%E7%96%AB%E6%83%85%E5%B0%81%E6%8E%A7%E4%B8%8B%E7%9A%84%E6%B8%A9%E6%9A%96/</url>
    <content><![CDATA[<blockquote>
<p>封控的日子，我逐渐学会如何在平淡的日子中，重拾初心；疫情下人生百态，眼中却尽是温暖。</p>
</blockquote>
<span id="more"></span>
<h1 id="突然的封控"><a href="#突然的封控" class="headerlink" title="　突然的封控"></a>　突然的封控</h1><p>2022年11月9号我和往常一样，在八点的时候自然醒来，睁开眼睛习惯性拿了手机看消息，看着群里的消息逐渐感觉有些不对，what !？ 有宿舍被封了？紧接着我看了眼企业微信。哦豁，出不去宿舍了。当时完全没有意识到事情的严重性，反而觉得有些开心，因为可以继续睡了哈哈哈。</p>
<p><img src="封控通知.jpg" alt=""></p>
<p>等我第二觉醒来的时候，群里一直在讨论，传言也越来越多。大概就是我们学校出现了一例阳性，所有楼栋的学生都不允许离开宿舍区，有密接的楼栋则不允许出宿舍门。</p>
<p><img src="突然的通知.png" alt=""></p>
<p>学校疫情封控，第一波压力首先给到的是食堂，平时食堂都是定量，突然要供给整个学校学生的量，食堂系统很难承受。但一方有难，八方相助，很难想到这样的词会在我的嘴里蹦出来，但或许这就是读书的意义，初闻不知曲中意，再闻已是曲中人。各个兄弟学校和本地企业都向我们伸出了援手，于是便出现了广大学子吃百家饭的名场面。</p>
<p><img src="兄弟学校支援.jpg" alt=""></p>
<p><img src="兄弟学校的支援小故事.jpg" alt=""></p>
<p><img src="支援2.jpg" alt=""></p>
<p><img src="广大学子吃百家饭.png" alt=""></p>
]]></content>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>读《人人都是产品经理》有感</title>
    <url>/2022/02/14/%E8%AF%BB%E3%80%8A%E4%BA%BA%E4%BA%BA%E9%83%BD%E6%98%AF%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E3%80%8B%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<p>2022-2-14 今天正式开始看《人人都是产品经理》</p>
<p>简单读了正文前的部分，发现这本书的语言很生动有趣，读起来也很有意思，尤其是作者将本书作为一个产品来进行简单的分析，活生生就是一个例子。</p>
<p>By the way 写读后感的这天是情人节，今天听到了一句话，结合自己的感情经历觉得很有感触所以记在这里：</p>
<blockquote>
<p>谈恋爱是认识自己，而不是取悦别人。</p>
</blockquote>
<span id="more"></span>
<h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><p>作者在这本书的开头说到，由于战略规划的特殊性，我们往往接触到的战略规划只是某个大战略下的细节，因此讨论战略规划不如搞清楚几个问题，这几个问题虽然简单，但是却很深刻：</p>
<p><strong>用什么产品来解决什么人的什么问题？</strong></p>
<ol>
<li>要解决什么问题，满足什么需求？</li>
<li>目标用户在哪里，以什么样的话卖点打动对方？</li>
<li>能提供什么产品和服务、核心竞争力，为什么是这个产品？（竞品分析）</li>
</ol>
<p>这本书的写作过程作者也用到了很多做产品中学到的东西（很多我可以借鉴的地方），需求分析、时间规划、项目管理、文档管理、营销推广等。</p>
<p><strong>思考：</strong> 某种意义上来说，论文是否也可以是一样产品，产品的”用户”首先是审稿人，然后是广大的学者和读者们，那么用户的需求就是产品（论文）是否使用新技术、新方法或者新角度，从而给用户们（读者们）一定的启发？一句话卖点则体现在你的摘要和题目如何打动审稿人并且能够吸引读者们。你所能提供的是你的产品的卖点，它与其他的文章不同在哪里，好在哪里，创新点是什么（也有点竞品分析那味儿了哈哈）？</p>
<p><strong>摘录：</strong> 我们应该养成一个习惯，当看到一个观点的时候，就有冲动去寻找与之矛盾的观点，然后通过对不同观点的分析找出背后的原因，从而更全面地理解某个事物，<strong>一个人成熟的标志之一就是心中可以容纳各种不同的思想而无碍于行事</strong> ，与君共勉。</p>
<p><strong>人人都是产品经理：</strong> 发现问题—转化为需求—形成任务—获得支持—发动伙伴—完成任务—持续跟进优化</p>
<h1 id="1到3岁的产品经理"><a href="#1到3岁的产品经理" class="headerlink" title="-1到3岁的产品经理"></a>-1到3岁的产品经理</h1><p>还没开始看内容，但是我还是按照惯例，先浅显的问了自己几个问题：</p>
<ol>
<li>什么是产品？</li>
<li>什么是产品经理？</li>
<li>产品经理是干啥的？</li>
<li>自己为什么想要成为产品经理？</li>
</ol>
<h2 id="为什么要做产品经理"><a href="#为什么要做产品经理" class="headerlink" title="为什么要做产品经理"></a>为什么要做产品经理</h2><blockquote>
<p>好产品可以改变世界（当然，坏的也可以）</p>
</blockquote>
<p>一个例子：<strong>怎样的设计可以让用户把门推开？</strong></p>
<p>答：没有门把手的门！无需贴提示（贴提示反而增加了用户的思考成本，还要反应一下推拉这一个动作），用户就会按照本能将门推开。</p>
<h2 id="什么是产品？"><a href="#什么是产品？" class="headerlink" title="什么是产品？"></a>什么是产品？</h2><p>百度百科里对产品是这样解释的：</p>
<blockquote>
<p>产品是一组将输入转化为输出的相互关联或相互作用的活动的结果，即“过程”的结果。</p>
<p>狭义概念：被生产出的产品；广义概念：可以满足人们需求的载体。</p>
</blockquote>
<p>作者的理解：产品就是用来解决某个问题的东西。产品可以是有形的实物，也可以是无形的服务。</p>
<p>所以解决问题实际上是在解决用户的需求，这样才能产生价值。这里的价值不仅要给产品的使用者，更要给产品的创造者。</p>
<p>作者在这本书里谈的产品是什么，<strong>产品是同时解决用户的问题和公司的问题的实物或服务。</strong></p>
<p>我个人一些浅显的想法：</p>
<p><strong>问题：产品是否未必是实物或者服务，或许一个超前的概念也可以将其包装为一样产品。</strong> 它或许当下未能确切解决用户的需求，但是在可预见的未来可能可以实现用户更高级的需求（例如元宇宙概念），就像硅谷精神提到的：<strong>Fake it until you make it.</strong>。</p>
<p><strong>思考：</strong> 但细想，按照 Roblox 的官方说法，<strong>元宇宙产品应具备八大要素：身份、朋友、沉浸感、低延迟、多元化、随地、经济系统、文明。当前并无一款产品能够完全称得上是元宇宙。</strong> 这意味着当今挂着元宇宙概念的产品其实只能提供元宇宙概念中某一维度的体验，所以某种程度上来说元宇宙概念不是一样产品，能够实现元宇宙的或许才能称之为一款真正的元宇宙产品。</p>
<h2 id="当今产品经理的能力侧重"><a href="#当今产品经理的能力侧重" class="headerlink" title="当今产品经理的能力侧重"></a>当今产品经理的能力侧重</h2><p>当今的产品经理更侧重与从无到有、从有到优的过程，涉及产品规划、数据分析、用户研究、需求分析、功能设计、项目管理、敏捷方法。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>典型的传统行业</th>
<th>互联网、软件行业</th>
</tr>
</thead>
<tbody>
<tr>
<td>行业形态</td>
<td>成熟行业</td>
<td>新兴行业</td>
</tr>
<tr>
<td>产品形态和成本结构</td>
<td>实物</td>
<td>虚拟物品</td>
</tr>
<tr>
<td>生命周期</td>
<td>几年</td>
<td>几个月</td>
</tr>
<tr>
<td>盈利模式</td>
<td>单一卖产品赚钱</td>
<td>多元盈利</td>
</tr>
<tr>
<td>用户心态</td>
<td>花钱买</td>
<td>免费用</td>
</tr>
</tbody>
</table>
</div>
<p>虽然叫经理，多少有点管理的味道，但其实每个人都应该有管理自己手头资源的能力。</p>
<blockquote>
<p>管理并不是公司的管理层，如总裁、总监、经理们才需要掌握的技能，而是每个人必备的生存技能，只是每个人可以掌控的资源不同，所以需要管理的对象也不同。— 德鲁克</p>
</blockquote>
<p>这里的资源在产品经理的工作中表现为以下形式：</p>
<ol>
<li>信息不足以决策。</li>
<li>时间不足以安排周密的计划。</li>
<li>人员不足以支持工作的强度和难度。</li>
<li>资金不足以自由调配。</li>
</ol>
<p><strong>凡是资源，总归不足</strong> —— 这是生活常态。</p>
<h2 id="怎样成为一名产品经理"><a href="#怎样成为一名产品经理" class="headerlink" title="怎样成为一名产品经理"></a>怎样成为一名产品经理</h2><p><strong>目标思维：</strong> </p>
<ol>
<li>确立目标。</li>
<li>明确现状与目标的差距。</li>
<li>寻找变化的切入点。</li>
</ol>
<p>我需要提升的：大量尝试、注册各种各样的产品，去用，去玩，去想。</p>
<p>尝试着站在不同的角度使用产品：</p>
<ul>
<li>用户角度：怎么使用这个产品才能给我产生更大的效用</li>
<li>产品经理角度：绕过表象，从背后看问题的本质，思考怎么设计这个产品才能更好地平衡用户目标与商业目标。</li>
</ul>
<p>面试官想看到的特质：有没有激情、是否够机灵、好学、逻辑思维是否清晰、沟通表达是否顺畅。</p>
<ul>
<li>谈谈生活中常用的一个产品，它解决了什么问题，要是你来改进，打算怎么做？</li>
<li>看电视/书/电影 吗，举个例子分析一下它的目标用户。</li>
</ul>
<p>全书结构图：</p>
<p><img src="./book.png" alt=""></p>
<h1 id="需求奋斗史"><a href="#需求奋斗史" class="headerlink" title="需求奋斗史"></a>需求奋斗史</h1><blockquote>
<p>用户和需求是产品的源头。</p>
</blockquote>
<p>看小标题这应该主要讲的是需求，惯例带问题看书：</p>
<ol>
<li>什么是需求？</li>
<li>需求与产品的有什么联系？</li>
<li>需求从哪里来？</li>
<li>为什么人会有需求？</li>
</ol>
<p>从需求被发现到决定实现，这就是一个需求的奋斗史。</p>
<p>做任何产品都是端到端的过程，端即用户，即“用户是需求之源”，所以必须要有“以用户为中心的思想”，体会真正的用户。</p>
<p><strong>需求采集的常见方法：</strong></p>
<ul>
<li>数据分析</li>
<li>调查问卷</li>
<li>用户访谈</li>
</ul>
<p><strong>需求分析：</strong></p>
<ul>
<li>要听用户的但不要照着做，同时明确我们存在的价值是将用户需求转换为产品需求。</li>
<li>确定需求的基本属性、分析需求的商业价值、初评需求的实现难度、计算出需求的性价比。</li>
<li>对于 PM 来说，更重要的是发现一个问题，然后设法将其转化为一个任务来解决。</li>
</ul>
<h2 id="人为什么有需求"><a href="#人为什么有需求" class="headerlink" title="人为什么有需求"></a>人为什么有需求</h2><blockquote>
<p> “食色性也”，“食”是为了生存保证个体延续，“色”是为了繁衍，保证种族延续，这是生物（人）的本性，也是最基本的需求。</p>
</blockquote>
<p>马斯洛需求层次理论：</p>
<ul>
<li>生理需求</li>
<li>安全需求</li>
<li>社交需求</li>
<li>尊重需求</li>
<li>自我实现需求</li>
</ul>
<p>所以为什么人会有各种各样的需求？因为生活中存在的问题太多了，从而产生各种不满意和不满足，而问题就是“理想与现实的差距”，自然而然人们就会想要“减少甚至消除这个差距”，这便是需求。</p>
<p>研究需求可以增强对用户的理解，而理解用户，是 PM 最重要的素质之一。</p>
<p><strong>小结：</strong> 需求的本质是“问题”，问题的本质是“理想与现实的差距”。</p>
<p><strong>Part Two End</strong></p>
<h2 id="用户和客户"><a href="#用户和客户" class="headerlink" title="用户和客户"></a>用户和客户</h2><p><strong>用户：User 是使用产品的人</strong></p>
<p><strong>客户：Customer 是购买产品的人，为产品付钱的人</strong></p>
<p>通常将所有与产品有关的人统称为用户或者产品干系人，除了终端用户、各类客户、所在公司与该产品有关的老板、销售人员、服务人员、技术人员等。但<strong>不同的用户有重要程度之分，必须也只能有所偏重。</strong></p>
<p><strong>优先满足产品使用者的需求而不是付钱者的需求。广义用户是需求之源。</strong></p>
<h2 id="以用户为中心的思想"><a href="#以用户为中心的思想" class="headerlink" title="以用户为中心的思想"></a>以用户为中心的思想</h2><p>UCD（User Centered Design）</p>
<p>BCD（Boss Centered Design）</p>
<p><strong>不要试图满足所有用户的需求</strong> ，试图满足所有用户的需求会令产品变成臃肿不堪，谁都不满意的四不像。（所以需求优先级排序至关重要，优先级高的先实现，后续不断更新产品以更好更优的方式实现优先级较低的需求）</p>
<p><strong>优先满足哪些用户的需求要和产品的商业目标结合考虑</strong> ，例如：腾讯 CEO 马化腾说应该关注核心用户的需求，但有些产品起步时应该先满足大量的一般用户的需求，这里的矛盾点在于：腾讯的产品已经充分占据市场，用户数不太可能再有爆发式增长，因此只能考虑从已有用户身上挖掘价值，而最有价值的用户是产品的核心用户。而刚起步的产品用户数少，首先需要满足一般用户的需求，让用户数爆炸增长。产品所处的阶段不同，目标自然就会有区别。</p>
<h2 id="体会真正的用户"><a href="#体会真正的用户" class="headerlink" title="体会真正的用户"></a>体会真正的用户</h2><blockquote>
<p>想要了解用户不能光凭空想，必须真刀真枪地去研究他们</p>
</blockquote>
<p>许多需求都是伪需求，有些表面的需求也需要深挖其根源需求，自己想出来的需求是最危险的，因为那是你自以为的需求，并不能代表大多数人。</p>
<p><strong>试着描述用户</strong>：</p>
<p>试着描述自己在用各种互联网应用的时候是个什么样的用户。</p>
<ul>
<li><strong>Email:</strong>  最开始使用的是 QQ 邮箱，主要是得益于 QQ 当时有着最大的用户群体，学生时代初期会用来发一些生日祝福贺卡啥的，还有一部分原因是以前的游戏需要邮箱来进行验证，因此也注册了网易邮箱。但中期有了微信之后邮箱的使用就仅限于用来收取验证码了。大四时邮箱使用率上升是因为考研失利需要调剂以及上岸之后与老师的文件往来，需要收发很多的邮件，后来我发现邮箱比起微信有一定的优势：首先是邮件的附件保存时间更长（微信常常会因为没有及时点开文件而导致文件过期），其次是邮件在形式上比微信更严谨。因为邮件收发通常不具有实时性的特点，所以一般邮件内容都是高度提炼的重点，并且其搜索功能也让邮箱整理变得不那么重要节省了很多的时间。</li>
</ul>
<p><strong>通过创建人物角色，时刻提醒自己正确的用户形象。</strong> 在上述内容之上加入用户个人信息、以及图片，写上你的或公司的目标与用户的目标，就是著名的Persona（用户画像）</p>
<ul>
<li>Persona 意为用户画像，在收集不同用户群体相关数据的基础上所建立的一系列用户模型。对于具有相似行为特征或者相似目标的用户来说，这些模型可以看成他们的原型。</li>
<li>与 Profile（用户档案）的区别：profile 描述的是用户个体（即单个用户），persona 描述的是一群用户，是基于抽象出来的群体特征建立的画像。</li>
<li>要想创建 Persona，用户行为和用户目标是要抓住的两大核心特点，通常根据可能的行为和目标划分不同用户群体。</li>
</ul>
<p><strong>用户研究不是产品设计过程中的附属内容，而是前提，不是为了做什么而去做用户研究，而是做了用户研究你才知道自己想要什么。</strong></p>
<p>推荐书籍：《赢在用户：WEB 人物角色创建和应用实践指南》— 其中提到的用户研究方法二维图</p>
<p><img src="./UserResearch.jpg" alt=""></p>
<p><strong>横向，用户的说和做</strong>：</p>
<p>怎么说表现了目标和观点，怎么做反映了行为（用户怎么说和怎么做经常是不一致的）。虽说“耳听为虚，眼见为实”，但有时只了解用户怎么做是无法知道背后原因的，不知道问题背后的原因就不知道怎么从根本上解决问题。</p>
<p><strong>纵向，定性和定量：</strong></p>
<p>定性研究可以找出原因，偏向于了解；定量研究则可以发现现象，偏向于证实。只定量容易“以标代本”，看到问题却不知道原因；只定性则容易“以偏概全”，容易被特殊样本带入歧途。人们认识实物的过程是定性到定量再定性定量的螺旋上升过程。</p>
<h2 id="需求采集"><a href="#需求采集" class="headerlink" title="需求采集"></a>需求采集</h2><p>实际工作中，到底采用什么样的用户研究方法，往往取决于资源（如人员数量和能力、时间、经费）</p>
<p><strong>基本步骤：</strong> </p>
<ul>
<li>明确目标</li>
<li>训责采集方法</li>
<li>制定采集计划</li>
<li>执行采集</li>
<li>资料整理</li>
<li>需求分析</li>
</ul>
<p><strong>用户研究方法的简化版：</strong></p>
<p><img src="UserResearchSimple.jpg" alt=""></p>
<h3 id="定性地说：用户访谈"><a href="#定性地说：用户访谈" class="headerlink" title="定性地说：用户访谈"></a>定性地说：用户访谈</h3><p>用户访谈的注意点：</p>
<ol>
<li>避免一组固定的问题，固定的问题会让被访者产生被审问的感觉，我们应该准备被好问题清单，但清单只起引导作用。</li>
<li>关注目标，任务其次：用户行为背后的原因更值得深入，多问问用户为什么这么做。</li>
<li>避免让用户成为设计师：听用户说，但不要照着做，用户的解决方案通常短浅、片面。</li>
<li>避免讨论技术：不要与用户纠缠产品的实现。</li>
<li>鼓励讲故事：故事是最好的辅助设计师理解用户想法的方法。</li>
<li>避免诱导性的问题：典型如”假设有 xx 功能，你会去使用吗？“，一般来说用户会给出毫无意义的肯定回答。</li>
</ol>
<h3 id="定量地说：调查问卷"><a href="#定量地说：调查问卷" class="headerlink" title="定量地说：调查问卷"></a>定量地说：调查问卷</h3><p>调查问卷和用户访谈的提纲是有区别的，用户访谈的提纲通常是开放式问题，适用于我们心里还比较疑惑的时候去寻找产品的方向；调查问卷通常封闭式问题较多，适合大用户量的信息收集。</p>
<p>调查问卷的注意点，不管线上还是线下最好不要超过10分钟（其实我觉得5分钟以内最好），开篇放一些不需要思考的问题；中间放你想要知道的内容，需要思考的较敏感的；涉及被访者个人信息的题目放在问卷的最后，以免应答者在回答这些问题时有顾忌。</p>
<p>一个问卷例子：</p>
<ul>
<li>问卷目的：收集本博客的读者反馈，总结得失，希望以后能做得更好。</li>
<li>样本对象：博客读者，以及对产品经理感兴趣的人。</li>
<li>调查渠道：网络，以及个人博客发布。</li>
<li>时间规划：收集三个月后给出分析报告。</li>
<li>问卷内容：不断优化。</li>
</ul>
<h3 id="定性地做：可用性测试"><a href="#定性地做：可用性测试" class="headerlink" title="定性地做：可用性测试"></a>定性地做：可用性测试</h3><p>可用性测试是指通过让实际用户使用产品或原型方法来发现界面设计中的可用性问题，通常只让几个用户测试，看他们怎么做，属于典型的定性研究。</p>
<p>UGC（User Generated Contet）理念，UGC主要过程：</p>
<ul>
<li>招募测试用户，这些用户要尽可能代表将来真实的用户。</li>
<li>准备测试任务，测试的组织者在测试前需要准备被好一系列要求用户完成的任务（这些任务应当是一系列要求用户完成的任务）。</li>
<li>测试过程，可用性测试的基本过程是用户通过使用产品来完成要求的任务，同时组织者在一旁观察用户操作的全过程，把问题记录下来；结束后，询问用户对于产品整体的主观看法或感觉。</li>
<li>研究分析，分析记录并产出一份产品的可用性问题。</li>
</ul>
<h3 id="定量地做：数据分析"><a href="#定量地做：数据分析" class="headerlink" title="定量地做：数据分析"></a>定量地做：数据分析</h3><p>对数据保持中立的态度，尽量不要“为了迎合一个观点而去找数据”，减少利益牵扯。</p>
<p>在产品设计的时候吧数据分析的需求加进去，避免出现想要做数据分析时手头没有却没有数据的窘况。</p>
<h3 id="单项需求卡片"><a href="#单项需求卡片" class="headerlink" title="单项需求卡片"></a>单项需求卡片</h3><p>一手需求：更多发生于新产品诞生时，这时候外部没有用户、内部没有运营等，所以需要主动采集需求。</p>
<p>二手需求：产品运行了一段时间，产品相关人员增加，与用户有直接接触的干系人反馈的多种需求。</p>
<p><img src="./requestcard.png" alt=""></p>
<h3 id="用户需求-VS-产品需求"><a href="#用户需求-VS-产品需求" class="headerlink" title="用户需求 VS 产品需求"></a>用户需求 VS 产品需求</h3><p>用户需求：用户自以为的需求，并且经常表达为用户的解决方案。</p>
<p>产品需求：经过我们的分析，找到的真实需求，并且表达为产品的解决方案。</p>
<p>需求分析：从用户提出的需求出发，找到用户内心真正的渴望，在转化为产品需求的过程。</p>
<h3 id="BRD-怎么写："><a href="#BRD-怎么写：" class="headerlink" title="BRD 怎么写："></a>BRD 怎么写：</h3><ul>
<li>项目背景：为什么做这个项目？解决什么问题？数据辅助。</li>
<li>商业价值：做了这个项目以后有什么价值，预测相关数字的变化。</li>
<li>功能需求描述：通过做哪些事来达到目标，把打包好的需求描述一下，最好画出业务逻辑关系。</li>
<li>非功能需求描述：如果有，提重要的。</li>
<li>资源评估：计算成本。</li>
<li>风险与对策：项目潜在风险，给出对策。</li>
</ul>
<p><strong>少做就是多做，用100%的质量去实现75%的数量，而不是反过来</strong></p>
<h3 id="需求管理："><a href="#需求管理：" class="headerlink" title="需求管理："></a>需求管理：</h3><ul>
<li>需求状态：“待讨论”、“拒绝”、“暂缓”、“需求中”、“开发中”、“已完成”。</li>
<li>负责PD：在需求状态变为“需求中”时指定，最有可能时此需求的提交人，要在需求的整个生命周期中保持跟进。</li>
<li>开发工程师：需求状态变为“开发中”时制定，负责该需求的技术实现，以及将来可能的故障解决。</li>
<li>项目名称：用于筛选某个项目的需求。</li>
<li>发布时间：用于查看某段时间发布的需求。</li>
<li>备注：需求被拒绝的理由、需求被暂缓的理由和重启条件。</li>
</ul>
<p><img src="./requestDNA-one.png" alt=""></p>
<p><img src="./requestDNA-two.png" alt=""></p>
<h3 id="产品产出文档类型："><a href="#产品产出文档类型：" class="headerlink" title="产品产出文档类型："></a>产品产出文档类型：</h3><ol>
<li>BRD: Bussiness Requirements Document(商业需求文档)，这是产品生命周期中最早的文档，其内容涉及市场分析、销售策略、盈利预测，一般没有产品细节，类似创业者给投资人看商业计划。</li>
<li>MRD: Market Requirements Document(市场需求文档)，产品进入实施阶段需要有细致的市场与竞争对手分析，包括可通过哪些功能来实现商业目的，功能、非功能需求分哪几块，功能的优先级等等。一般此阶段产出产品的Feature List、业务逻辑图等。</li>
<li>PRD: Product Requirements Document(产品需求文档)，功能的进一步细化，文档内容主要包含整体说明、用例文档、产品Demo等，会对产品功能做具体的描述。</li>
<li>FSD: Functional Specifications Document(功能详细说明)</li>
</ol>
<h1 id="灵魂跟上脚步"><a href="#灵魂跟上脚步" class="headerlink" title="灵魂跟上脚步"></a>灵魂跟上脚步</h1><h1 id="产品经理的自我修养（莫名想到演员的自我修养）"><a href="#产品经理的自我修养（莫名想到演员的自我修养）" class="headerlink" title="产品经理的自我修养（莫名想到演员的自我修养）"></a>产品经理的自我修养（莫名想到演员的自我修养）</h1><blockquote>
<p>热爱生活。</p>
</blockquote>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6模块化</title>
    <url>/2023/06/18/ES6%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<p>ES6 模块化相关知识</p>
<span id="more"></span>
<h1 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h1><ul>
<li><p>AMD 和 CMD 适用于浏览器端的 JS 模块化</p>
</li>
<li><p>CommonJS 适用于服务器端的 JS 模块化</p>
<ul>
<li>CommonJS （Node.js 的标准）</li>
</ul>
</li>
<li>ES6 模块化规范<ol>
<li>每个 JS 文件都是一个独立的模块</li>
<li>导入其他模块成员使用 import 关键字</li>
<li>向外共享模块成员使用 export 关键字</li>
</ol>
</li>
</ul>
<h2 id="在-Node-js-中体验-ES5-模块化"><a href="#在-Node-js-中体验-ES5-模块化" class="headerlink" title="在 Node.js 中体验 ES5 模块化"></a>在 Node.js 中体验 ES5 模块化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 新建包管理文件 package.json</span><br><span class="line">npm init -y </span><br><span class="line">// 在根节点中添加模块化</span><br><span class="line">&quot;type&quot;: &quot;module&quot;</span><br></pre></td></tr></table></figure>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ol>
<li><p>默认导出和默认导入(注意事项： export default 只能使用一次)</p>
<ol>
<li>默认导出 export default 默认导出的成员对象（导出的是一个对象）</li>
<li>默认导入 import 接收名称 from ‘模块.js’（接受上面导出的对象的名称）</li>
</ol>
</li>
<li><p>按需导出和按需导入</p>
<ol>
<li>按需导出 export 成员名称</li>
<li>按需导入 import {} from </li>
</ol>
<p>注意事项：</p>
<ol>
<li>模块中可以多次按需导出</li>
<li>按需导入的成员名称必须和按需导出的名称保持一致</li>
<li>按需导入时，可以使用as关键字进行重命名</li>
<li>按需导入可以和默认导入一起使用（import info）</li>
</ol>
</li>
<li><p>直接导入并执行模块中的代码 直接import模块</p>
</li>
</ol>
<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>多层回调函数相互嵌套，形成了回调地狱。</p>
<p>tips: 什么是回调函数（在某些事情结束之后执行的函数）</p>
<p>缺点：代码耦合性太强，难以维护；大量冗余代码互相嵌套，代码的可读性变差。</p>
<h2 id="Promise-的基本概念"><a href="#Promise-的基本概念" class="headerlink" title="Promise 的基本概念"></a>Promise 的基本概念</h2><ol>
<li>Promise 是一个构造函数 const p = new Promise()</li>
<li>new 出来的 Promise 实例对象，代表一个异步操作</li>
<li>原型对象 Promise.prototype 上包含一个 .then() 方法</li>
<li>.then 预先指定成功和失败的回调函数<ol>
<li>p.then(result =&gt; {}, error =&gt; {}) 成功是必选的，失败是可选的</li>
</ol>
</li>
</ol>
<p>如何按顺序输出？</p>
<p><strong>.then 方法的特性</strong>：</p>
<ul>
<li>如果上一个 .then()方法中返回了一个新的Promise实例对象，则可以通过下一个.then()继续进行处理。</li>
<li>通过这样的链式调用，可以解决回调地狱的问题</li>
</ul>
<p><strong>通过 .catch 捕获错误</strong></p>
<p><strong>Promise.all()</strong> 会发起并行的 Promise 异步操作了，等所有的异步操作全部结束后才会执行下一步的.then操作</p>
<p><strong>Promise.race()</strong> 会发起并行的Promise异步操作，只要任何一个异步操作完成，就立即执行下一步的.then操作</p>
<p><strong>Promise 异步操作的结果，可以用 resolve 或 reject 回调函数进行处理</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(err) <span class="keyword">return</span> reject(err)</span><br><span class="line">resolve(dataStr)</span><br></pre></td></tr></table></figure>
<h2 id="async-awit"><a href="#async-awit" class="headerlink" title="async / awit"></a>async / awit</h2><p>async / await 是 ES8 引入的新语法，用来简化 Promise 异步操作</p>
<p>async / await出现之前，开发者只能通过.then()方法链式处理 Promise() 异步操作</p>
<p>在 async 方法中，第一个 await 之前代码会同步执行，await 之后的代码会异步执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> delay(<span class="number">2000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> delay(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line">example();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;End&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Start</span><br><span class="line">1</span><br><span class="line">End</span><br><span class="line">2 (经过2秒后)</span><br><span class="line">3 (再经过1秒后)</span><br></pre></td></tr></table></figure>
<p>在上述示例中，首先输出 “Start”，然后调用 <code>example()</code> 函数。</p>
<p>在 <code>example()</code> 函数内部，首先输出 “1”，然后遇到第一个 <code>await</code> 表达式，它等待 2 秒钟的延迟。在等待期间，代码的执行被暂停，事件循环继续执行其他任务。</p>
<p>接着，经过 2 秒后，第一个 <code>await</code> 表达式解析完成，输出 “2”。然后，遇到第二个 <code>await</code> 表达式，它等待 1 秒钟的延迟。</p>
<p>最终，经过 1 秒后，第二个 <code>await</code> 表达式解析完成，输出 “3”。然后函数执行完毕。</p>
<p>总结起来，<code>async/await</code> 允许我们编写异步代码，但以更直观的同步</p>
<h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><p>JavaScript 是一门单线程运行的编程语言，也就是说，同一时间只能做一件事情</p>
<p>缺点：当前一个任务非常耗时的时候。后续任务不得不一直等待，会导致<strong>程序假死</strong>的问题</p>
<h3 id="同步任务和异步任务"><a href="#同步任务和异步任务" class="headerlink" title="同步任务和异步任务"></a>同步任务和异步任务</h3><p>同步任务</p>
<ul>
<li>非耗时任务，在主线程上排队执行的任务</li>
<li>前一个任务结束才执行后续</li>
</ul>
<p>异步任务</p>
<ul>
<li>耗时任务，委托给宿主环境（浏览器 or Node.js）</li>
<li>异步任务执行后，通知主线程执行异步任务回调函数</li>
</ul>
<h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><ol>
<li><p>宏任务（macrotask）</p>
<ul>
<li>异步Ajax请求</li>
<li>setTimeout、setInterval</li>
<li>文件操作</li>
<li>其他宏任务</li>
</ul>
</li>
<li><p>微任务（microtask）</p>
<ul>
<li>Promise.then、.catch和.finally</li>
<li>process.nextTick</li>
<li>其他微任务</li>
</ul>
<p><strong>执行流程：</strong></p>
<p>宏任务-&gt;执行结束-&gt;有微任务(没有的话直接执行下一个宏任务)-&gt;执行所有微任务-&gt;执行下一个宏任务</p>
<p><img src="/images/宏任务和微任务.png" alt="img"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
